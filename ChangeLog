2003-08-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.*: explode, receiveHit intrinsics (not complete yet)

2003-08-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/MonsterEgg.*: changed baseclass of MonsterEgg from Egg to Item
	* docs/savegame.txt: updated (note: savegames broken)

2003-08-31  Darke  <darkepaw@users.sf.net>
	* convert/Convert.h, tools/fold/*: More opcodes folded. sub(0x1C),
	  loop(0x70), loopnext(0x73), loopscr(0x74), so loopscript support
	  is in... except it doesn't work since jmp's are always assumed to
	  be positive (which they aren't). Fix coming sometime soon (I hope!).
	  
2003-08-30  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/AvatarMoverProcess.*: move the avatar.

2003-08-30  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/CurrentMap.cpp: do a (time) range-check in sweepTest
	* world/actors/Actor.cpp: properly interpret sweepTest in tryAnim

2003-08-24	Darke  <darkepaw@users.sf.net>
	* convert/Convert.h, tools/fold/*: Added 'add' op. (Hey, if wjp can
	  have lots of tiny commits, so can I! *grin*)
	  
	* As above: Added 'spawn' and 'implies' to fold, cheating a little on
	  the latter. *grin*

	* As above: Added 'pop temp' and 'suspend'. Spawn function calls should
	  completely work now... hopefully.
	  
2003-08-23	Darke  <darkepaw@users.sf.net>
	* convert/Convert.h, tools/fold/*: Fixed Maximally Annoying Bug(tm),
	  and a few other minor things.
	  
2003-08-09  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/AvatarMoverProcess.*: non-functioning avatar movement
	* world/actors/Pathfinder.*: a pathfinder which doesn't quite work yet
	* world/actors/PathfinderProcess.*: a process to make npcs pathfind
	* kernel/GUIApp.*: new keycombos (keypad + ctrl/alt/shift)
	* gumps/GameMapGump.*: avatar movement
	* world/actors/Actor.*, ActorAnimProcess.*, AnimAction.h:
	  animation tweaks

2003-07-28  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/AnimAction.*: moved anim start/end to separate function
	* world/actors/Actor.*: doAnim(), tryAnim()

2003-07-26  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* docs/savegame.txt: updated
	* world/actors/AnimAction.h: named some flags
	* world/actors/ActorAnimProcess.*: handle AnimAction flags

2003-07-20  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Container.*, world/actors/Actor.*: dumpInfo()
	* kernel/*: give Processes a pid on construction (except when loading)
	* usecode/*: make spawned UCProcesses run immediately, without
	  suspending the calling process

2003-07-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.*: Item::dumpInfo()

2003-07-17  Max Horn <max@quendi.de>
	* misc/Palette.*: Moved struct Palette into namespace Pentagram
	* various: adapted to Palette now being in namespace Pentagram

2003-07-17  Dominik Reichardt <dominus@users.sourceforge.net>
	* kernel/GUIApp.cpp: changed Quicksave/load to F7/F8
	  (like the original)
	* readme: mentioned savegame keys

2003-07-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* misc/idMan.*: moved idMan from kernel/ to misc/
	* misc/idMan.*: doxygen; idMan now expands dynamically
	* usecode/UCMachine.*: use idMan for strings/lists
	* docs/savegame.txt: updated

2003-07-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/ObjectManager.cpp: added loader for PaperdollGump
	
2003-07-16  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.cpp, world/CurrentMap.*: save new FastArea
	* docs/savegame.txt: updated
	* filesys/SavegameWriter.cpp, kernel/GUIApp.cpp: output some save info

2003-07-16  Ryan Nunn <colourles@users.sourceforge.net>
	* audio/midi/*.* : Fixing doxygen comments
	* audio/midi/fmpopl*.* : Added stereo support to FMOpl. Doesn't make a
	  huge difference, but it was trivial to add so I did it.
	* audio/midi/LowLevelMidiDriver.* : Changed the way the coms work. It
	  wont stall anymore when attempting to stop a track.
	* audio/midi/WindowsMidiDriver.* : Moved the #define NO lines to the 
	  cpp file because they could confict with other things
	* audio/midi/timidity/*.* : Correct support for Win32 paths, and some
	  tweaks
	* graphics/*.* : Make the palette transform matrix use fixed point 
	  rather than floating point
	* Like every other file I'm committing: Changes for new Item::move 
	  methods and fastArea

2003-07-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.*: mouse cursor
	* kernel/GUIApp.*: cleaned up dragging a bit

2003-07-12  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* gumps/ContainerGump.cpp: item combining

2003-07-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* README: updated with new keys (changing avatar Z is now home/end)
	* gumps/PaperdollGump.*: avatar paperdoll gump (no status yet)
	* gumps/ContainerGump.*: cleaned up a bit
	* gumps/GameMapGump.cpp: dump flags/extflags when displaying item info
	* world/Item.cpp: open PaperdollGump for Avatar

2003-07-06  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* README: added config/audio/midi_driver option
	* audio/midi/*: changed midi driver names
	  (they're now: windows, fmopl, timidity, coreaudio)
	* world/Item.*: openGump(), closeGump() functions
	* world/Object.cpp, world/Item.cpp: changed Object/Item savegame format
	* world/GlobEgg.*, world/Item.cpp: don't save unchanged in-glob items
	* usecode/UCMachine.cpp, usecode/BitSet.cpp: some bugfixes
	* world/actors/Actor.*: equipment
	* kernel/GUIApp.cpp: give Avatar backpack and some money at the start
	* kernel/GUIApp.cpp: i, b, r shortcuts
	* world/Item.cpp: some legalCreateInCont changes

2003-07-06  Max Horn <max@quendi.de>
	* audio/midi/CoreAudioMidiDriver.*: Fixed some GCC 3.3 warnings;
	  implemented increaseThreadPriority/yield.

2003-07-06  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/idMan.*, kernel/Kernel.*, kernel/ObjectManager.*:
	  an O(n^2) object loading algorithm probably wasn't such a good idea

2003-07-06  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* configure.ac, audio/midi/timidity/*: added --with-timidity=path
	  to configure to supply default timidity path
	* audio/midi/various: typos :-)
	* audio/midi/timidity/*: use config/audio/timiditycfg to get configfile

2003-07-05  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* configure.ac, bootstrap, Makefile.in: timidity
	* configure.ac: don't use SDL_mixer anymore

2003-07-05  Ryan Nunn <colourles@users.sourceforge.net>
	* filesys/ODataSource.h, tools/fold/*.* : Deque'ing the
	  OBufferDataSource. Changed it to ODequeDataSource. Added a real 
	  OBufferDataSource and also added OAutoBufferDataSource.
	* audio/midi/TimidityMidiDriver.*, audio/midi/timidity/*.* : Adding 
	  Timidity so we can use it natively. You will need USE_TIMIDITY_MIDI
	  defined.
	* kernel/GUIApp.*, audio/midi/*MidiDriver.* : Added some Midi driver
	  selection code. You can now select which driver you want with the
	  config key "config/audio/midi_driver". Just enter the class name.
	  If you set that to "disabled" midi with be disabled. Also, SDL_Mixer
	  is no longer required for FMOpl.
	* audio/MusicProcess.cpp : Making it so it remembers which song it 
	  should be playing if there is no midi driver.
	* audio/midi/XMidiEventList.cpp, audio/midi/XMidiFile.cpp : Fixing up
	  a few problems.
	* filesys/SavegameWriter.* : Now uses a OAutoBufferData source instead 
	  of ODequeDataSource
	* misc/Q_strcasecmp.*, audio/midi/fmopl.* : Just being paranoid with 
	  namespaces.
	* usecode/UCMachine.cpp : Getting rid of a stupid warning
	
2003-07-05  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: some error checks

2003-07-04  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* everything: saving/loading
	* usecode/BitSet.*: a bitset for the globals
	* docs/savegame.txt: savegame format
	* kernel/ObjectManager.*: moved objects from Kernel to ObjectManager
	* filesys/NamedFlex.h: abstract class for files with named contents

2003-07-03  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* configure.ac: detect SDL_mixer, FMOPL option

2003-07-03  Ryan Nunn <colourles@users.sourceforge.net>
	* audio/MusicProcess.cpp : Fixing a problem with tracks that have been
	  stopped.

2003-07-03  Ryan Nunn <colourles@users.sourceforge.net>
	* audio/midi/MidiDriver.h : Added some extra functions. 
	  setSequenceSpeed() and a few for the FMOplMidiDriver (and could 
	  probably be used by others, but probably wont be). Also added 
	  destroyMidiDriver function. Init now returns 0 on success and an
	  driver specific non zero error code on failure.
	* audio/midi/LowLevelMidiDriver.* : Changes so FMOplMidiDriver can 
	  inherir this. What I've done isn't the most 'oo' way of doing things,
	  but I don't care at the moment.
	* audio/midi/XMidiSequence.* : Speed changing, and fixing a few bugs.
	* audio/midi/fmopl.* : The emulated OPL2 device
	* audio/midi/FMOplMidiDriver.* : The Midi Driver for the Emulated OPL2
	  device. To use it, you need to define USE_FMOPL_MIDI and link to 
	  SDL Mixer.
	* audio/MusicFlex.h : Changing the adlib timbre function
	* audio/MusicProcess.cpp : Hacking the speed of the fades to 200% (the
	  original did do this too)
	* kernel/GUIApp.* : Added improved Midi Initialization code. Put it in
	  it's own function. Added code to deinit the midi devices. Added 
	  FMOplMidiDriver to the list of supported Midi devices. Added some 
	  basic SDL Mixer initializtion code. Made it so The Keypad + and -
	  keys adjust the volume.
	* usecode/UCMachine.*, kernel/Object.cpp : Getting rid of the 
	  UCMachine::addProcess() and UCMachine::killProcess() functions.

2003-07-02  Max Horn <max@quendi.de>
	* misc/Rect.h: Moved struct Rect into namespace Pentagram (it conflicts
	  with a struct in the Mac OS X system headers); removed xr/yb members
	  (besides adding 8 byte more memory, they were useless, and in fact
	  since a lot of stuff modifies x/y/w/h directly, they quickly got out
	  of sync)
	* various: adapted to struct Rect now being in namespace Pentagram
	* audio/midi/CoreAudioMidiDriver.*: Mac OS X Midi driver using
	  CoreAudio, based on the equivalent ScummVM driver
	* kernel/GUIApp.cpp: On Mac OS X, instantiate CoreAudioMidiDriver
	* configure.ac: Added -framework AudioUnits, needed by
	  CoreAudioMidiDriver 

2003-07-02  Ryan Nunn <colourles@users.sourceforge.net>
	* world/SpriteProcess.cpp : Set FLG_DISPOSABLE, even though it's not
	  yet implemented
	  
	* Most files committed : Added Midi music. Of course at the moment 
	  there is only a WindowsMidiDriver, so the rest of you people will 
	  need to get your own. At this stage, you'll need to modify the code 
	  in GUIApp.cpp to load the driver. Just search for WindowsMidiDriver.
	  
	  Implementing drivers by using LowLevelMidiDriver is the recommened 
	  method. Just inherit it, and implement the open(), close() and send()
	  functions. This is the same as the ScummVM drivers, so you can just 
	  steal those, and modify them to inherit the right class and also to 
	  remove the ScummVM specific code. I've also added 2 extra functions,
	  that I strongly recommend that you implement. First one is 
	  increaseThreadPriority() which is supposed to increase the execution
	  priority of the 'playing' thread (which is the current thread when
	  called). This function is desired because the main Pentagram thread
	  likes to have so much CPU time, that it will cause timing problems
	  for the Midi playing thread. The other function is yield() which will
	  yeild execution of the current thread. This is of course so the play
	  thread with higher priority wont steal all your CPU time.

	  At this stage, implementing driver just with MidiDriver is not a good
	  idea. Some things may change here, and MusicProcess assumes that the
	  driver can play 2 sequences simultaneous. That will be changed at 
	  some stage.

2003-06-29  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GameDetector.cpp: fixed crash for non-U8 games

2003-06-27  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Kernel.*, world/World.cpp: kill any process belonging to an
	  object on map change

2003-06-27  Ryan Nunn <colourles@users.sourceforge.net>
	* convert/crusader/ConvertUsecodeCrusader.h : Some No Regret 1.21 
	  intrinsics.

2003-06-27  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.cpp: don't crash when dragging invalid item
	* world/Item.cpp: fixed or hanging items don't fall

2003-06-27  Ryan Nunn <colourles@users.sourceforge.net>
	* gumps/GameMapGump.cpp, world/CameraProcess.cpp : Fixing roof popping 
	  so it checks above where the camera is, not where the avatar is.
	* world/CameraProcess.*, usecode/u8intrinsics.h : Added Earthquakes.
	* usecode/UCMachine.* : Making the for each loops safe so multiple
	  processes and nested loops don't step on each others toes.
	* tools/fold/FuncNodes.cpp : Making compatible with MSVC.
	* world/ItemSorter.cpp : The item sorter will now resize if it's too 
	  small. However, this will occur next frame, not this frame, so the 
	  current sorted list is not invalidated.
	* filesys/ListFiles.h : Some std stuff in the windows code
	* docs/scratch/saving : Added Earthquake stuff.

2003-06-26  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* gumps/Gump.*, gumps/GumpNotifyProcess.*: pointers -> ids

2003-06-25  Max Horn <max@quendi.de>
	* usecode/UCMachine.cpp, usecode/UCProcess.cpp, usecode/UCStack.h:
	  rewrote UCStack to not inherit from IDataSource
	* kernel/CoreApp.h, kernel/GUIApp.h, kernel/Process.h: turned some
	  plain comments into doxygen comments

2003-06-25  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.*: conf/ supports multiple config files/roots,
	  so might as well use it.
	* world/Item.*, various: use objids for 'gump' and 'glob_next'
	* world/Item.h: changed 'shape' from const to private. We'll just need
	  to make sure we always use setShape in Item.
	* docs/scratch/saving: a what-to-save list
	* world/GlobEgg.*: use objid for contents

2003-06-24  Max Horn <max@quendi.de>
	* various: fixed strict GCC 3.3 warnings

2003-06-24  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCList.*: fixed string leaks
	* usecode/UCProcess.*, usecode/UCMachine.cpp: implemented opcode 6C

2003-06-22  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/MainActor.*: accumulateStr/Dex/Int, doxygen
	* kernel/GameDetector.*: some simple game/language detection code
	* kernel/GameDetector.*: detect spanish

2003-06-22	  Ryan Nunn <colourles@users.sourceforge.net>
	* world/actors/Actor.h : private to protected

2003-06-22  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/*App.*: refactored startup sequence
	* kernel/CoreApp.*: game selection changes
	* conf/XMLTree.cpp: fix crash on write()
	* various: cleanup and doxygen comments
	* kernel/GameInfo.h: GameInfo struct for game version info

2003-06-22  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.*, gumps/GameMapGump.*: fixed bug with items disappearing
	  after dragging.
	* world/Item.*, gumps/GameMapGump.*: Made items fall down when
	  supporting item is dragged away. Implemented I_grab().
	* world/CurrentMap.cpp: clear FLG_MONSTER_NPC items on map change
	* gumps/Gump.*: converted some comments to doxygen comments

2003-06-21	  Ryan Nunn <colourles@users.sourceforge.net>
	* world/CurrentMap.cpp : Fixing the searches
	* world/CurrentMap.h : Updated docs
	* world/Item.cpp : Tweaking collisions
	* world/SpriteProcess.*, usecode/u8intrinsics.h : Sprites

2003-06-21  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Object.h, world/Item.h, world/Container.h: doxygen comments
	* world/Container.*: reset parent in Container::RemoveItem
	* gumps/ContainerGump.*: check whether item fits while dragging
	* kernel/GUIApp.cpp: don't allow dragging items while in stasis

2003-06-21	  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/GUIApp.cpp, world/CurrentMap.*,
	  world/actors/ActorAnimProcess.cpp, world/Item.*,
	  world/MissileProcess.cpp, world/GravityProcess.cpp:
	  Added item->collideMove() function. You should use this function to
	  moves whenever possible since is will properly call all the hit and
	  wasHit functions.
	* usecode/UCMachine.cpp, world/CurrentMap.* : Surface Search
	* usecode/u8intrinsics.h, world/Item.* : I_getSurfaceWeight and
	  I_isExplosive
	* world/CurrentMap.h : Testing doxygen comments
		
2003-06-21  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* gumps/ConsoleGump.h: PointOnGump always returns false
	* gumps/Gump.*: added FindGump(x,y) to find the gump on that location
	* gumps/Gump.*, kernel/GUIApp.*: item dragging
	* gumps/GameMapGump.*, gumps/ContainerGump.*: support dragging items
	  from/to world and containers
	* various: cleaned up a bit

2003-06-21	  Ryan Nunn <colourles@users.sourceforge.net>
	* gumps/GameMapGump.cpp : 'Fixing' GetLocationOfItem so it actually
	  works correctly.

2003-06-20	  Ryan Nunn <colourles@users.sourceforge.net>
	* filesys/IDataSource.h : IBufferData sources now accepts void *
	* graphics/Palette*.*, graphics/XFormBlend.*, graphics/Texture.*, 
	  graphics/*SoftRenderSurface.*, kernel/GUIApp.cpp : Re-working how
	  XForm works. Added Palette transformations.
	* kernel/GameData.* : Loads music.flx. This is for a few tests I'm
	  doing.
	* graphics/PaletteFaderProcess.*, usecode/u8intrinsics.h : Added a
	  bunch of palette effect functions.
	* world/Item.*, usecode/u8intrinsics.h : Added I_guardianBark.
	  I_getQuality only return q IF the family is SF_QUALITY
	* world/ItemSorter.cpp : Fixing silly problem
	* gumps/GameMapGump.cpp : Don't roof pop items with DRAW type flag
	* kernel/Kernel.cpp : ObjID 666 is reserved (it's used in a nasty hack
	  for guardianBark, and I don't want it used by anything else)
	* world/Egg.h, world/CurrentMap.cpp : Reset eggs on map writeback
	* world/World.cpp : Disabled killing of all processes on map change
		
2003-06-19  Dominik Reichardt <dominus@users.sourceforge.net> 
	* README: added section of games/versions supported by pentagram,
	  and 'c', 'h' and shift key

2003-06-19  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/SoftRenderSurface.cpp, graphics/Font.cpp: fixed crash
	  with French version of U8
	* kernel/GameData.cpp: small hack to try loading fusecode/gusecode

2003-06-18  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: cleaned up item loop a bit
	* usecode/UCMachine.cpp: semi-fixed push/pop global
	* usecode/UCMachine.cpp: reverse list creation order

2003-06-18	  Ryan Nunn <colourles@users.sourceforge.net>
	* graphics/*RenderSurface.*, graphics/XFormBlend.*, world/Item.h,
	  world/ItemSorter.* : Added a funky highlighted shape mode. Set shapes
	  extFlag EXT_HIGHLIGHT to set it.
	* world/CurrentMap.*, kernel/GUIApp.cpp : Rewrote much of the sweepTest
	  code. Updated the gotHit hack to reflect the changes. Now also call
	  Release when you step off/away from an item you have hit. Any items
	  you are hitting are now shown highlighted when hitting is enabled
	  ('h'). This is purely a debug thing.

2003-06-18	  Ryan Nunn <colourles@users.sourceforge.net>
	* gumps/ContainerGump.cpp, gumps/GameMapGump.*, kernel/Object.*,
	  world/Egg.cpp, world/Item.* : Changed things so callUsecodeEvent is
	  private. Added separate functions to call each event. Added functions
	  for all usecode events, including hit, gotHit, cast,
	  AvatarStoleSomething and guardianBark that push args to the stack.
	  Arg pushing is now supported
	* world/CurrentMap.*,  : Added CurrentMap::sweepTest() to do more
	  accurate collision detection. It will detect things that are being
	  touched, even if aren't trying to pass through it.
	* kernel/GUIApp.cpp : Hacked in the calling gotHit when the avatar
	  moves. By default this is OFF cause falling into water is annoying.
	  Toggle with 'h'.

2003-06-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/ItemSorter.cpp: check for valid frame
	* world/ItemMoveProcess.*: renamed ItemMoveProcess to MissileProcess
	* Makefile.mingw: use objects.mk

2003-06-17	  Ryan Nunn <colourles@users.sourceforge.net>
	* gumps/ConsoleGump.*, misc/Console.*, kernel/GUIApp.cpp : Added 4 line
	  console overlay when the console is up. Console now also
	  automatically raises after Pentagram is loaded.
	* kernel/GUIApp.cpp : Included a hacky 'clipped' mode for Avatar
	  movement. Use 'C' to toggle it. It's off by default. Also added a
	  quarter speed move mode. Hold do either shift to slow things down.

2003-06-16  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/MonsterEgg.cpp: set FLG_MONSTER_NPC on NPCs spawned by egg
	* world/GravityProcess.*: move an item with gravity (not yet done)
	* world/Item.*: hurl, fall intrinsics

2003-06-16	  Ryan Nunn <colourles@users.sourceforge.net>
	* convert/u8/ConvertUsecodeU8.h, usecode/u8intrinsics.h : Hurl is
	  actually a process so I made it use I_dummyProcess.
	* usecode/u8intrinsics.h, kernel/GUIApp.* : Added some getTimeIn???
	  instrinsics. These will not be the final versions of these. They are
	  purely place holders for now.
	* usecode/UCMachine.cpp, kernel/Kernel.cpp, kernel/Process.h :
	  Deferred process termination. This fixes problems with processes
	  terminating before implies is called.
	* world/CurrentMap.cpp : Execute NPC schedule funcs on map load. Also
	  added in code to execute cachein funcs on map load. However cachein
	  was messing up the start sequence, so the code is commented out for
	  now.
	* usecode/intrinsics.h, world/* : New intrinsic ARG Macros. Including
	  new WorldPoint struct.
	* kernel/GUIApp.*, usecode/u8intrinsics.h : Added
	  I_setTimeInGameHours() so beds now work. Also added time
	  (minutes + seconds) and gamehour display.

2003-06-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/MainActor.*: teleportToEgg intrinsic
	* world/Item.*: legalMoveToPoint intrinsic
	* world/CurrentMap.cpp: fixed collision typo

2003-06-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* gumps/AskGump.cpp: Free strings. Still some leaks remaining.
	* world/CurrentMap.*: canExistAt intrinsic
	* kernel/GUIApp.cpp: 't' outputs kernel/usecode/world stats
	* world/CurrentMap.cpp: fixed areaSearch range
	* kernel/GUIApp.*, gumps/GameMapGump.cpp: 'e' toggles editor items
	* world/World.cpp: output Avatar location in worldStats

2003-06-15	  Ryan Nunn <colourles@users.sourceforge.net>
	* convert/u8/ConvertUsecodeU8.h, usecode/UCMachine.* : Some nasty hacks
	  to show the u8 instrinsic names.
	* gumps/GameMapGump.* : Sort order debugging
	* gumps/Gump.* : Minor changes
	* gumps/GumpNotifyProcess.*, gumps/widgets/SimpleTextWidget.* :
	  p_dynamic_cast stuff
	* gumps/AskGump.*, kernel/GUIApp.cpp, world/Item.cpp : Ask Gump. No
	  more I_ask() hacks required.
	* gumps/widgets/ButtonWidget.* : This really isn't a button yet. All it
	  really is at the moment is a SimpleTextWidget that responds to mouse
	  events.
	* kernel/GUIApp.cpp : 'a' and 'z' keys can now be used to move the
	  avatar vertically. '[' and ']' work again. 's' can now be used to
	  toggle avatarInStatis.
	* world/TeleportEgg.h : Use framenum to determine if it is a teleporter
	  or a dest.

2003-06-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: fixed jumps
	* world/Item.cpp: fixed legalCreateInContainer

2003-06-15	  Ryan Nunn <colourles@users.sourceforge.net>
	* world/ItemSorter.cpp : Fixing the positively absolutely busted
	  ItemSorter

2003-06-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/ItemSorter.cpp: invisible items don't occlude
	* graphics/AnimDat.cpp: deltaz is (of course) signed

2003-06-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/GumpShapeFlex.*: load gumpage.dat
	* gumps/ContainerGump.*: use data from gumpage.dat
	* gumps/GameMapGump.*: middle mouse button makes an item invisible...

2003-06-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: change operand order of lsh/rsh. Fixes doors

2003-06-14  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/CurrentMap.*: collision/roof/support detection
	* gumps/CurrentMap.*: roof popping
	* usecode/UCMachine.*: don't have spawn run processes itself

2003-06-14	  Ryan Nunn <colourles@users.sourceforge.net>
	* gump/widgets/SimpleTextWidget.* : I can't quite remember, but i think
	  I just added something called the SimpleTextWidget.
	* gumps/BarkGump.* : Removed old text hack, added new hacks that use
	  SimpleTextWidget. Sometime in the future it will correctly use
	  something with a name like MultiPageTextWidget
	* gumps/Gump.h : Added some forward looking stuff aka a way for widget
	  to notify their parents of 'something', where 'something' is
	  something specific to the widget.
	* kernel/GUIApp.cpp : Added stuff to allow me to execute my plans to
	  TAKE OVER THE WORLD *cough* *cough* I mean, I added the
	  AvatarMoverProcess which I created for the Royal Society of the
	  Prevention of Harm To Keyboards.
	* misc/Console.cpp : You want unused variables, YOU CAN'T HANDLE UNUSED
	  VARIABLES!
	* world/LoopScript.h : Ritulastic Macro Abuse aka using the Preprocess
	  to compile LoopScripts using macros.

2003-06-13  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.cpp: cleaned up FIRST/EXCUTION hacks

2003-06-13  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.*, gumps/*: gump dragging

2003-06-12  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Kernel.*: moved objects from World to Kernel
	* lots: adjusted for above change
	* kernel/GUIApp.*, gumps/*: changed gump mouse input handling again
	* kernel/Kernel.*: new/signalled processes are run immediately

2003-06-10  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GUIApp.h: made GUIApp::get_instance() return a GUIApp*
	* kernel/GUIApp.*, gumps/*: mouse events
	* various: minor bugfixes, typos

2003-06-09  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* gumps/ContainerGump.*, gumps/ItemRelativeGump.*: getItemLocation
	* gumps/ContainerGump.*: close container gumps of contents when closing

2003-06-08  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* gumps/ContainerGump.*: a container gump. No interaction yet.
	* gumps/ContainerGump.*: item tracing

2003-06-06	Darke <darkepaw@users.sf.net>
	* misc/Console.*: Added support for a basic message filtering
	  system for output. Basicly instead of your normal
	  con.Printf(...) call, you instead call
	  `con.Printf(MM_INFO, ...)` (or whatever mask you want other
	  than MM_INFO...) and depending upon what the global mask is set
	  to allow, it will be appropriately printed or not. The default
	  is to print everything. For details as to what the general
	  masks mean, see the MsgMask enum in misc/Console.h. Most of the
	  examples are currently in kernel/CoreApp.cpp.
	* filesys/FileSystem.cpp: Added message filtering stuff.
	* kernel/CoreApp.*, kernel/ConApp.cpp: Added message filtering
	  stuff, and a basic 'help' command line message (triggered on -h
	  flag), only useful in llc at the moment, since support needs to
	  be added in the derived class.
	  Also added '-q' and '-qq' flags for 'quiet' and 'very quiet'
	  output, but since most of the GUIApp and related output hasn't
	  been correctly setup according to the new setup in Console,
	  you're not going to notice much. I'm getting there slowly...
	  *grin*
	* filesys/IDataSource.h: Fixed casting warning.

2003-06-03  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/ItemSorter.*, gumps/GameMapGump.*: move camera-related
	  calculations to the end of the rendering 'pipeline' to prevent
	  some tearing between items

2003-06-03	  Ryan Nunn <colourles@users.sourceforge.net>
	* gump/ItemRelativeGump.* : Fixing broken ItemRelativeGump

2003-06-03	Darke <darkepaw@users.sf.net>
	* filesys/ListFiles.h: A quick update to properly re-munge the
	  filenames.

2003-06-03	  Ryan Nunn <colourles@users.sourceforge.net>
	* filesys/IDataSource.h : Theoretically fixing the readline()
	  problem.

2003-06-03	  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Process.h : A few new useful methods
	* kernel/Object.cpp : When an ObjID is cleared, all processes
	  belonging to that ObjID are now terminated.
	* graphics/Font.*, graphics/SoftRenderSurface.cpp : Added
	  Baseline, hlead and vlead stuff.
	* gumps/* : Changed SetupLerp to 'run'. Improved item dependant
	  gump handling. Any item dependant gump will now have a
	  GumpNotifyProcess owned by the item the gump is dependant on.
	  When the process is terminated, it will close the gump. Added
	  MapChanged() methods, so the gumps can do various maintenance
	  duties when changing maps.
	* gumps/BarkGump.* : Improved font stuff
	* misc/Console.* : Removed dependencies from even CoreApp.
	* kernel/GUIApp.* : Changes to get around forcing Console to be
	  dependant on an App. Changed where the new
	  desktop->Run(framenum) is called
	* graphics/Shape.* : Added new constructor (from IDataSource)
	* kernel/GameData.* : Mouse shape (not yet used)
	* world/EggHatcherProcess.cpp : Correcting egg range.
	* world/Item.* : Fixing animation speeds. Fixing busted lerping.
	* world/World.cpp : Call MapChanged() on gumps

2003-06-03	Darke <darkepaw@users.sf.net>
	* objects.mk, module.mk, tools/disasm/module/mk,
	  tools/fold/module.mk: Shuffled the lists of objects into their
	  own file so I could 'easily' link the other stand alone apps.
	* tools/disasm/Disasm.cpp: Updating to get it working again.
	* tools/compile/llcTokens.h, tools/compile/llcLexer.*,
	  tools/compile/CompileUnit.h, tools/compile/CompileProcess.cpp,
	  tools/compile/Compil.cpp: Some updates to support loading
	  usecode from proper directories, etc, kind of half finished
	  since Colourless' big commit interrupted it a little. *grin*
	* tools/kernel/Kernel.cpp: Added obvious optimisation.
	* usecode/UCMachine.*, usecode/Usecode.h, tools/compile/llc.cpp,
	  kernel/[GUI|Core|Con]App.*: Suffled the usecode machine out of
	  CoreApp, given it's dependancy on... well... *everything*
	  there's no real way to abstract it enough atm, since things are
	  still in half-built stages. Soon though... *muhahahahaha!*
	* filesys/FileSystem.*, filesys/ListFiles.h: Added preliminary
	  support for getting a list of files inside a dir. Still needs a
	  bit of work (doesn't correctly translate raw paths, back to our
	  sandboxed @paths...)  and it only 'works' correctly under
	  linux/unix (I think, mingw might work though... and everything
	  else is #error-ed). So if Colourless is quick, he might be able
	  to get a completely working version working under 'doze before
	  I under linux! *grin*

2003-06-02  Ryan Nunn <colourles@users.sourceforge.net>
	* gumps/Gump.* : Fixing invalid focus_chlid problems
	* kernel/CoreApp.h, kernel/GUIApp.h, misc/Console.cpp : Console
	  no longer dependant on GUIApp.

2003-06-02  Ryan Nunn <colourles@users.sourceforge.net>
	* Almost every single file being committed here : Changes the
	  p_dynamic_cast macros. Just check P_dynamic_cast.h for the new
	  macros to use. Also made the macros define some new functions.
	  These are:
	  1) IsOfType() which can check to see if an object is of a
	   certain type. It can be used in 2 ways, either with
	   IsOfType(ClassToCheck::ClassType) or IsOfType<ClassToCheck>().
	  2) GetClassType(), which gets the ClassType for an object
	   virtually so it always gets the ClassType for the class the
	   object was created with.

	* Changes due to filesystem: No more raw accesses. Added readline
	  to IDataSource. Getting the ifstream from an IFileDataSource is
	  no longer such a hack. Added 'memory files'. Not entirely
	  feature complete, but what I've done lets me play with using
	  Windows Resources for data files.

	* docs/scratch/quotes.txt : Some long overdue quotes that were
	  supposed to be added but I held off. And no Darke, there are no
	  toys here ;-)

	* GUMPS! : Lots of gump related stuff, so much stuff I doubt I
	  could list it all. Suffice to say the rendering hacks in GUIApp
	  are long gone. Console and GameMap are now drawn using their
	  primitive Gumps. Much of Gump framework is done, however, I
	  have no idea if input handling will work anything near
	  correctly. All the old input hacks are still in place. Added
	  ItemRelativeGump. Added BarkGump. It's not entirely finished
	  because it should use a TextWidget or some such rather than
	  having all the code to handle text drawing in it. Got
	  Item::I_ask to create a BarkGump to list the choices. Of course
	  that is in no way a correct solution. Added u8gumps.flx to
	  GameData. It's just of type ShapeFlex for now but I don't think
	  it needs any changes, not now anyway

	* Font related: Added some hacks that only allow the length of a
	  line of text to be about 160 pixels. This is a hack to force
	  word wrapping with BarkGumps. Added a getHeight() method that
	  can get the height of a font and also getTextSize() which will
	  calculate a rect that will fit the text (baseline and stuff
	  will cause problems here).

	* Various files: Fixing up various bug and stuff.

2003-06-01  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/idMan.*: added function to mark any ID as used
	* world/MonsterEgg.*: monster hatching
	* world/actors/Actor.*: createActor intrinsic
	* world/Item.cpp: fixed pop to container

2003-05-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/EggHatcherProcess.*: an egg hatcher
	* world/CurrentMap.*: hatch eggs
	* world/TeleportEgg.*, world/actors/MainActor.*: teleporting

2003-05-30  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/AnimDat.cpp, world/actors/AnimAction.h: read more
	anim. data
	* docs/u8anim.txt: changed some flag guesses
	* world/*Egg*: use original's way of storing egg data

2003-05-30  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/CurrentMap.*: findDestination to locate a teleportegg
	* world/MonsterEgg.*: stub-ish monsteregg
	* world/TeleportEgg.*: stub-ish teleportegg

2003-05-29  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/FontShapeFlex.*, graphics/Font.*: fonts
	* graphics/*ShapeFlex*: default palette for a ShapeFlex
	* graphics/*RenderSurface*: PrintChar
	* graphics/*RenderSurface*: a very very basic PrintText

2003-05-29	Darke <darkepaw@users.sf.net>
	* configure.ac: Adding semi-b0rk3n support for linking into a
	  seperate console-only binary. Almost completely useless, overly
	  linked to objects and in the wrong place (since I was wanting
	  to not have to duplicate the significant list of overlapping
	  objects for console vs. gui binaries), and I couldn't get the
	  module.mk to support it properly. No point to modifying the
	  .mingw makefile with this binary at the moment, wait until I
	  get around to disentangling everything. *grin*
	* kernel/[Core|GUI]App.*: Cleanup of random left-over crud.
	* module.mk, llcLexer.cpp: Pointless cleanup of warnings when I
	  was bored at work. *grin*
	* usecode/UCMachine.*: Minor additional abstraction.
	* kernel/ConApp.*,llc.cpp: Console application abstraction.

2003-05-29  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* configure.ac: 'sed' is one of the standard utilities configure
	uses, so checking for it won't help. Things will break horribly
	without it.
	* configure.ac: cleaned up the platform-specific #define's a bit

2003-05-28	Darke <darkepaw@users.sf.net>
	* configure.ac: Checks for `sed` and reports a warning if it's
	  lacking.
	* tools/compile/module.mk: Runs a few sed scripts so that it
	  shouldn't  be necessary to hack-make a correct FlexLexer.h or
	  prepend a #include "pent_include.h"
	* tools/compile/llcLexer.cpp: The updated 'should work' file.
	  Of course this needs a little testing on a system that's just
	  slightly more broken then mine. *grin*

2003-05-27	Darke <darkepaw@users.sf.net>
	* kernel/CoreApp.*, kernel/GUIApp.*: Split up Application into a
	  'Core' base class and a 'GUI' subsystem, and removed the
	  original kernel/Application.* files.
	* module.mk, pentagram.cpp, tools/compile/Compile.cpp,
	  tools/compile/CompileProcess.cpp,
	  tools/disasm/DisasmProcess.cpp, usecode/UCMachine.cpp,
	  usecode/u8intrinsics.h, world/CameraProcess.cpp,
	  world/Item.cpp: Flow on effect from above.

2003-05-26  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/*: use animation frame repeat flag
	* usecode/UCProcess.*, kernel/Process.*: moved itemnum/type to
	  Process
	* kernel/GameData.*: load u8fonts.flx

2003-05-26  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Application.cpp, world/CameraProcess.* : A tweek to the
	  lerping when following an item.

2003-05-26	Darke <darkepaw@users.sf.net>
	* configure.ac: Couple of relevant only to the usecode compiler
	  config flags.
	* module.mk: More random sorting...
	* kernel/Application.h: Hiding what I shouldn't have unhidden.
	  *grin*
	* tools/compile/*: More compiler stuff, still doesn't do anything
	  really.
	* world/Item.cpp: Removal of old-style casts.

	* tools/compile/llcLexer.cpp: Added 'cause flex2.5.4 hasn't
	  really been maintained in the last 7 years...

2003-05-25  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: process exclude

2003-05-25  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Application.* : Timing and interpolation, Fast Area,
	  Camera, avatarInStatis
	* kernel/Kernel.cpp : Fixing erase bug
	* usecode/u8intrinsics.h : Camera, avatarInStatis
	* usecode/UCMachine.cpp : Fixing huge bug
	* world/CameraProcess.* : Camera
	* world/Item.* : Interpolation changes. Fast Area, Animate, Added
	  some optimizations for getting a Shape and ShapeInfo.
	  Consequently the 'shape' member is now const and needs to be
	  set with setShape() (yes this is a bit of a hack)
	* world/ItemFactory.cpp : use setShape()
	* world/ItemSorter.cpp : An optimization

2003-05-25  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Application.cpp: getCurrentTimerTick

2003-05-25  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCProcess.cpp: don't push this pointer if it's zero

2003-05-25	Darke <darkepaw@users.sf.net>
	* configure.ac: Removed dependancy on awk and yacc, since we use
	neither, and added flex dependancy since we're now using it.
	* module.mk: Started cleaning it up a little so we might,
	  someday, be able to compile an application without dragging
	  *everything* in...
	* tools/compile/module.mk: Added handling of .l files.
	* tools/compile/CompileProcess.*: Added some minor compiler
	  functionality.
	* tools/compile/Compile.cpp, tools/compile/CompileUnit.h,
	  tools/compile/llcLexer.[h|l], tools/compile/llcTokens.h:
	  More compiler related files.

	* tools/compile/CompileNodes.h: There's got to be a rule that for
	  *every* major commit I must forget adding at least one file...
	  *sigh*

	* tools/compile/llcLexer.l: Quick cleanup of cruft.

2003-05-20  Ryan Nunn <colourles@users.sourceforge.net>
	* world/actors/ActorAnimProcess.cpp: Avoiding problems with
	  bounds.

2003-05-20  Ryan Nunn <colourles@users.sourceforge.net>
	* usecode/UCMachine.cpp : 1 Based lists
	* kernel/Application.cpp : A hack to support 'different' versions
	  of U8 with f and g keys

2003-05-20  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/ActorAnimProcess.cpp: smoothen repeating animations

2003-05-20  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/Actor.*: intrinsics
	* kernel/Application.cpp: press g to trigger execution if you're lucky

2003-05-20  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.*: some more functions and corresponding intrinsics
	* world/ItemMoveProcess.*: made curve optional
	* world/actors/Actor.*: hacked in ItemMoveProcess for "pathfinding"

2003-05-19  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.cpp: changed create item intrinsics a bit
	* world/ItemMoveProcess.*: process that moves items around

2003-05-19	Darke <darkepaw@users.sf.net>
	* misc/Args.*, kernel/Application.*: Fixed argument const correctness
	  at wjp's insistance. *grin*

2003-05-18  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* misc/Direction.h: world-direction function

2003-05-18  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.*: intrinsics
	* usecode/*: rearranged spawn opcode (again)

2003-05-18  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* misc/Rect.h: Rect::Overlaps
	* world/CurrentMap.*: area searches
	* world/Container.*: container searches
	* world/UCMachine.*: searching
	* kernel/Application.cpp: press f to trigger first egg if you're lucky

2003-05-18  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/Actor.*: basics of actor flags

2003-05-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Kernel.*: kernel intrinsics
	* world/World.*, world/actors/Actor.*: some actor attributes/intrinsics

2003-05-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/World*, world/Item.*: ethereal items, push/pop intrinsics
	* world/actors/Actor.*, world/Item.*: more intrinsics

2003-05-17  Darke <darkepaw@users.sf.net>
	* */.cvsignore: Added CVSROOT/cvsignore, so removed all .deps/Makefile
	  entries and entire files if that's all they held.

	* filesys/FileSystem.*: Add ability for it to create directories on
	  request should they not exist.
	* kernel/Applications.*: Added 'work' directory stuff. Directory gets
	  mounted on @work, and is defined either by the config file:
	  <config>
	      <u8>
	           <path> /path/to/u8 </>
	           <work> /path/to/u8/work/dir </>
	      </>
	  </>
	  Default value is (under linux at least) $HOME/.pentagram/u8-work
	  or $HOME/.pentagram/gamename-work for a game named 'gamename'.
	  Also has yet-another --param option too, that doesn't exist.
	* misc/Args.*: Constness.
	* tools/compile/*: Doesn't exist. You're imaging there's something
	  there that does nothing. There's nothing there, and it most certainly
	  does nothing.

2003-05-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/World.*, kernel/GameData.*: moved fixed from World to GameData
	* item/Item.h: added FLG_FASTAREA
	* item/Item.cpp: make Item::getFootpad use FLG_FLIPPED

2003-05-17  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/*: check for invalid direction in animations

2003-05-16  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/ActorAnimProcess.*: forgot p_dynamic_cast
	* world/*: marked some issues with equipped items
	* world/Container.*: set FLG_CONTAINED flag properly
	* world/Container.*, world/Item.*: more intrinsics

2003-05-16  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.cpp: got rid of some unused vars
	* world/actors/*: only allow one simultaneous animation per actor

2003-05-16  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* docs/design/items.txt: some notes about Item
	* world/CurrentMap.*, world/Item.*: move items somewhat more correctly
	* world/actors/ActorAnimProcess.*: keep link back to Actor as objID

2003-05-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/*, graphics/AnimDat.*: read/play animations
	* kernel/Application.cpp: press 't' to make Devon walk a bit

2003-05-15  Ryan Nunn <colourles@users.sourceforge.net>
	* world/Map.cpp, world/World.cpp : Fixing 'lamp' problem (coords must
	  be read as unsigned)
	* kernel/Application.cpp, world/ItemSorter.* : Sort debugging ([ and ])
	  and fixing a few incorrect sort order problems.

2003-05-14  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Application.cpp, usecode/UCMachine.*: target intrinsic hack
	* world/Item.*: some item creation intrinsics

2003-05-14  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.cpp, graphics/ShapeInfo.*: moved getTypeFlag to ShapeInfo

2003-05-14  Ryan Nunn <colourles@users.sourceforge.net>
	* Lots of files: Getting rid of warning due to type conversion, unused
	  args and other such stuff.

	* convert/u8/ConvertUsecodeU8.h : Marking processes, and fixing a few
	  miskates.

	* graphics/ShapeInfo.h, graphics/TypeFlags.cpp : Added some new unknown
	  typeflags.

	* kernel/Application.cpp, misc/Console.* : Clicking an item will return
	  its quality. Added ability to scroll console with Pageup and Pagedown

	* world/Item.cpp : Changed the NPC classid detecion in callUsecodeEvent
	  since npcs aren't the only items to have somehing in npcnum. Fixed up
	  I_getTypeFlag which was seriously broken. The new code is horrible
	  to look at.

	* world/Item.h : Added FLG_MONSTER_NPC. But, I'm not sure if that is
	  correct.

	* world/ItemSorter.cpp : Added a few consts. A few other minor changes.

	* usecode/u8intrinsics.h : All unimplemented processes should now be
	  dummy processes.

2003-05-13  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.cpp: use quality+0x47F as usecode class for unkeggs
	* usecode/UCMachine.*: some utility intrinsics

2003-05-13  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Application.cpp: arrows scroll map; esc/q quit
	* kernel/Application.cpp: backtick/tilde hides console

2003-05-13  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.*: cleaned up pointer dereferencing
	* world/Item.*: intrinsics

2003-05-12  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*: dummy getName() intrinsic (returns 'Avatar')
	* usecode/u8intrinsics.h, world/Item.*: intrinsics

2003-05-12  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Item.*: loopscript support in Item
	* world/*: changed some fields in Item to uint16
	* usecode/UCMachine.*: one (out of three) loopscript opcodes
	* usecode/UCStack.h: UCStack::push1(uint8)

2003-05-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp, usecode/UCProcess.cpp:
	spawn now puts arguments on the stack before the this pointer
	* usecode/UCMachine.cpp: push globals pushes 1 byte flags as 16 bit

2003-05-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: cleaned up a bit

2003-05-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Application.cpp: right-click uses an item
	* usecode/UCMachine.cpp: bugfixes
	* usecode/u8intrinsics.h: 'process' intrinsics return a dummy process

2003-05-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*: minor changes
	* world/Item.cpp, kernel/Application.cpp: hacked in the Ask intrinsic
	* graphics/ShapeInfo.h, world/ItemFactory.cpp: added unknown family 15

2003-05-11  Darke <darkepaw@users.sf.net>
	* tools/disasm/DisasmProcess.*: New disassembler process files.
	* kernel/Application.*: Added stub of disassembler process; parameter
	  handling; and new config file format, the default u8 and data paths
	  have been shuffled to something that looks like this:
	  <config>
	      <u8>
	          <path> /home/darke/game/pagan2.13 </>
	      </>
	      <general>
	          <data> /home/darke/code/pentagram/data </>
	      </>
	  </config>
	* random-files: Updated copyright to 2003.

2003-05-11  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/memset_n.h : Added generic memset_32 and memset_16 functions.
	  Additionally added optimized memset_32 funcs (which are used by
	  memset_16). These might be useful in other places than in Fill32().

	* graphics/*RenderSurface.* : Added PaintInvisible methods. This is
	  used for shapes with the Invisible flag. Changed the asm Fill32()
	  funcs to use memset_16 and memset_32

	* graphics/XFormBlend.* : Invisibility blending.

	* world/ItemSorter.* : Added another AddItem() method. Added support
	  for PaintInvisible().

	* misc/Console.h : Added GetConFont() method.

	* kernel/Application.cpp : Frame timing info is no longer printf'd. It
	  is now snprintf'd and is drawn to the screen using
	  RenderSurface::PrintTextFixed().

2003-05-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Application.cpp: show shape/frame when clicking
	* kernel/Application.cpp: start on avatar's map

2003-05-10  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*: some error checking
	* kernel/Application.cpp: removed usecode call on startup

2003-05-10  Ryan Nunn <colourles@users.sourceforge.net>
	* world/World.cpp : Fixing assignObjId();
	* world/Item.cpp : A hack for handling NPC usecode funcs
	* misc/p_dynamic_cast.h : NULL pointer wont crash
	* kernel/Application.cpp : Spawn Look process on click trace

2003-05-10  Ryan Nunn <colourles@users.sourceforge.net>
	* graphics/*RenderSurface.* : Implemented functions to set clipping
	  region. Added function to move the effective origin position.

	* graphics/SoftRenderSurface.inl, kernel/Application.cpp,
	  world/ItemSorter.* : Slightly changed the way the screen coords work.
	  The world is now drawn with the origin set to the centre of the
	  screen instead of at the top left.

	* graphics/ShapeFrame.* : Added hasPoint()

	* world/ItemSorter.* : Display List Tracing for click detection

	* kernel/Application.cpp : Added a simple tracing test for left
	  mouse button up.

	* misc/Rect.h : Added a few extra possibly useful features

2003-05-05  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/SoftRenderSurface.cpp: asm version of uint32-Fill32/gcc/x86

2003-05-05  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Kernel.*, kernel/idMan.*, world/World.* : l33t id handling.

2003-05-05	Darke <darkepaw@users.sf.net>
	* kernel/Applications.*: Partial support for a simple font-config file.
	* data/fixedfont.cfg: Said basic config file.
	* configuration.ac: Added --enable-random-optimisations which currently
	  only adds -O3, and updated the warnings list used by
	  --endable-paranoid-warnings.

	Obviously Colourless' fault: *grin*

	* graphics/*RenderSurface.cpp : Double Buffering and Hardware surfaces
	* kernel/Application.cpp : Fullscreen can now be set with
	  config/video/fullscreen setting.

2003-05-04  Ryan Nunn <colourles@users.sourceforge.net>
	* world/ItemSorter.cpp : Enable 'fast' noclip painting.
	* world/World.* : Removed 'old' SetupDisplayList methods.
	* graphics/SoftRenderSurface.cpp : Some inline assember for fast buffer
	  clearing with MSVC. Since I wrote it, might as well commit it.
	* world/CurrentMap.h : Get per glob/chunk item lists.
	* kernel/Application.cpp : New fast item sorting.

2003-05-03 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/*: add NPCs to CurrentMap's item lists
	* world/Egg.*: stub egg class

2003-05-03  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Application.cpp : More info about rendering times

2003-05-03  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Kernel.cpp : Uh oh, changed it so the kernel will NOT
	  terminate when there are no more processes.

	* kernel/Application.cpp : Pressing a key will now quit Pentagram. The
	  World will now be displayed as the background. This is temporary

	* world/ItemSorter.* : Added ItemSorter. Not completely finished
	  yet, but it works.

	 * world/GlobEgg.cpp : Fixed an allignment issue.

	 * world/Item.* : Status flags, and some interpolation stuff

	 * misc/Rect.h : Added operator ==

	 * world/World.* : Adding items to display list. Doing it like this is
	   temporary

	* filesys/IDataSource.h : Adding an unhack for the float stuff. Not
	  usable yet.

	* graphics/*RenderSurface.* : Adding a clipping check function.
	  Slightly optimized text rendering.

	* misc/pent_include.h : Added another CANT_HAPPEN macro. This one in
	  theory allows a string to be passed to the Macro that 'should' be
	  displayed when the assertion fails. However that is going to be
	  compiler and runtime dependant

2003-04-30 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/*: very very basic event handling

2003-04-29  Darke <darkepaw@users.sf.net>
	* Various .h/.cpp files: Pointless Copyright year update when noticed.
	* kernel/Application.*: Abstraction of core constructor into
	  appropriately named functions.

2003-04-21  Darke  <darkepaw@users.sf.net>
	* convert/*: Altered prototype usecode function names. Changed from a
	  mishmash of short/ushort/whatever originally defined, corrected to
	  byte/short/ushort/etc.
	* filesys/IDataSource.h: Cleanup/warning.
	* misc/pent_include.h: A couple of useful CANT_HAPPEN defines.
	* tools/disasm/Disasm.cpp: Minor code cleanup.
	* tools/fold/*: Code reorgnising to make it a bit more compatable with
	  a compiler that will hopefully be finished sometime this century.

	* tools/fold/CommonBases.h: Added file forgotten.

2003-04-20  Darke  <darkepaw@users.sf.net>
	* conf/Configuration.cpp, convert/ConvertShape.cpp,
	  convert/ConvertShape.h, filesys/IDataSource.h, filesys/ODataSource.h,
	  filesys/U8Save.cpp, graphics/BaseSoftRenderSurface.cpp,
	  graphics/Shape.cpp, graphics/ShapeFlex.h, graphics/ShapeFrame.cpp,
	  graphics/SoftRenderSurface.cpp, graphics/SoftRenderSurface.inl,
	  graphics/Texture.h, graphics/TextureBitmap.cpp,
	  graphics/TextureTarga.cpp, graphics/XFormBlend.cpp,
	  graphics/XFormBlend.h, gumps/ConsoleGump.cpp, gumps/GameMapGump.cpp,
	  gumps/Gump.h, kernel/DelayProcess.h, misc/Console.cpp,
	  misc/p_dynamic_cast.h, tools/fold/Fold.cpp,
	  tools/shapeconv/ShapeConv.cpp, usecode/UCMachine.cpp,
	  usecode/UCProcess.cpp, world/Item.cpp:
	  Most warnings elminiated and a potential data initilisation bug or
	  two fixed along the way. F33r my static_casts d00dz! *cough* Ahem.

2003-04-14 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/*: cleaned up globegg code a bit

2003-04-13 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GameData.*: load globs
	* world/*: globs, globeggs

2003-04-08 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* various: minor changes

2003-04-07 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*intrinsics.h, usecode/*: intrinsics
	* world/Item.*: added some basic item intrinsics
	* kernel/Object.*: bugfix

2003-04-07 Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/GameData.*: GameData class for storing datafile objects
	* docs/maps.txt: some object count info

2003-04-05  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*, kernel/*: added some usecode-call functions
	* Makefile.mingw: set CFLAGS/CC variables

2003-03-22  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* various: minor bugfixes
	* Gump.h: add OnTextInput event

2003-03-21  Ryan Nunn <colourles@users.sourceforge.net>
	* kernel/Application.cpp : Added some config related output
	* world/CurrentMap.cpp, world/World.cpp : msvcisms
	* world/Item.* : Some initial interpolation stuff.
	* world/GlobEgg.*, world/actors/Actor.*, world/actors/MainActor.* :
	  p_dynamic_cast stuff
	* gumps/Gump.* : Some changes reflecting extra thought about mouse
	  input handling.

2003-03-16  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Objects.*, world/*: objID stuff
	* world/World.*, kernel/Kernel.*: more memory stats

2003-03-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* filesys/U8Save.*: simple U8Save class to load u8save.000
	* filesys/Flex.*: made Flex more Flexible
	* kernel/Application.cpp: load gamedat files from u8save.000

2003-03-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/GlobEgg.*: stub GlobEgg class
	* world/*: adding some functionality

2003-03-14  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/CurrentMap.*: CurrentMap class in progress

2003-03-10  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/actors/*: stub Actor/MainActor classes
	* world/ItemFactory.*: added createActor function
	* world/Map.*, World.*: moved ItemCach loading to World (just for NPCs)

2003-03-09  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/*.*: item loading from fixed/nonfixed (and untested itemcach)
	* world/*.*: test loading all items in all maps from nonfixed.dat
	* filesys/Flex.*: added method to get an object as a BufferDataSource

2003-03-08  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/World.*: main World class. (Just some comments, for now)

2003-03-08  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/TypeFlags.*, graphics/ShapeInfo.h: typeflag.dat handling
	* kernel/Application.cpp: load typeflag.dat
	* graphics/MainShapeFlex.*: class for the main shapeflex (u8shapes.flx)
	* world/*: starting some map reading code. (very unfinished)

2003-03-08  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* */*: minor tweaks/warnings
	* module.mk: added new object files

2003-03-08  Ryan Nunn <colourles@users.sourceforge.net>
	* convert/ConvertShape.*, convert/crusader/ConvertShapeCrusader.*,
	  convert/u8/ConvertShapeU8.* : Fixing a problem with SKF shapes.
	  Improved Auto detection speed. Added second faster, less safe,
	  auto detection function. Tweaking of Pentagram shape format

	* filesys/FileSystem.* : Added option to allow full access to system
	  paths. I did this so the various command line tools wont require
	  virtual paths to be set.

	* filesys/IDataSource.h : Added signed readXS method.

	* graphics/*RenderSurface.* : Moved and renamed SoftRenderSurface to
	  BaseSoftRenderSurface, and renamed U8SoftRenderSurface to
	  SoftRenderSurface. Implemented all shape drawing methods. Commented
	  out some palette stuff that doesn't look like it's going to be used.

	* graphics/SoftRenderSurface.inl : Macro heaven, now with less macros
	  and more comments. Oh, this contains the shape drawing code if you
	  really needed to know.

	* graphics/Palette.*, graphics/PaletteManager.* : Some changes to
	  support xforming.

	* graphics/Shape.*, graphics/ShapeFlex.*, graphics/ShapeFrame.* :
	  Changed things so all the shape formats can be loaded and used.
	  As things currently are, the shape formats will be autodetected.
	  Using shapes converted to the Pentagram Shape Format should be
	  fastest.

	* graphics/XFormBlend.cpp : XFormBlending functions. Only have U8Xform
	  functions at the moment, so Crusader stuff doesn't look correct.

	* gumps/*.* : Some near-stub gump classes. Nothing much here, except a
	  start. Thought I would just commit this.

	* kernel/Application.cpp : Added an 'avatar' to the centre of the
	  screen, as a test.

	* kernel/Object.cpp : Added for p_dynamic_cast support

	* misc/pent_include.h : 2003

	* kernel/Object.*, world/Container.*, world/Item.* : Added
	  p_dynamic_cast support.

	* kernel/Process.*,  usecode/UCMachine.cpp, usecode/UCProcess.* : Also
	  added p_dynamic_cast support here too.

	* tools/shapeconv/ShapeConv.cpp, tools/disasm/Disasm.cpp : Stop filesys
	  from forcing the use of virtual paths.

2003-03-07  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* world/Glob.*, Map.*, ItemFactory.*: some more near-stub classes

2003-03-06  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Object.h: small start of a base usecode object class
	* world/Item.*, world/Container.*: item/container classes

2003-03-03  Max Horn <max@quendi.de>
	* misc/Console.h: work around a bug in Apple's GCC by forcing printf
	  methods to not be inlined.

2003-02-24  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/pent_include.h, misc/p_dynamic_cast.h : Adding p_dynamic_cast
	  stuff. If we use it... we use it. If we don't... it doesn't matter.

2003-02-24  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* bootstrap: don't run automake. Committed the 3 files it generates.

2003-02-23  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* filesys/FileSystem.*: some sanity checks for vpaths
	* kernel/Application.cpp: @ instead of % for vpaths

2003-02-22  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* filesys/FileSystem.*: added basic virtual path support
	* kernel/Application.*: setup/use virtual paths
	* configure.ac: renamed configure.in to configure.ac

2003-02-08  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* graphics/Palette.*: load palette from datasource
	* graphics/PaletteManager.*: palette manager
	* graphics/ShapeFlex.*: shape flex class

2003-02-07  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/DelayProcess.h: process that waits a number of ticks
	* graphics/Shape.*, graphics/ShapeFrame.*: shape, frame classes
	* graphics/Palette.h: palette struct
	* graphics/*: shape painting
	* usecode/*: minor changes

2003-01-05  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: pass this pointer to inline processes
	* kernel/Process.cpp: clear 'waiting' list after notifying

2003-01-04  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/*: added waitFor to processes
	* usecode/*: implemented implies

2003-01-02  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* convert/ConvertShape.h: compile error
	* conf/XMLTree.cpp: allow 0xHEX constants as integers
	* graphics/SoftRenderSurface.h: typo

2003-01-02  Ryan Nunn <colourles@users.sourceforge.net>
	* AUTHORS : Changed my email address

	* conf/XMLTree.cpp : Fixed the infinte loop.

	* convert/ConvertShape.*, convert/crusader/ConvertShapeCrusader.*,
	  convert/u8/ConvertShapeU8.* : Expanded the ConvertShapeFormat
	  structure. Defined a Pentagram shape format. Added ConvertShapeFormat
	  definitions for U8 Gumps/Mouse, U8 SKF Shapes and Crusader
	  Gumps/Mouse. Added function to check if a shape is valid for a
	  particular format.

	* tools/shapeconv/ShapeConv.cpp : Added support for input and output
	  of all formats. Note the new command line params. (ShapeConv is now
	  dependant on Args.cc). Also added support of single shp files. Will
	  automatically assume single shape if the file has a .shp extension.
	  Single shape mode can also be forced by command line param.

2002-12-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* convert/ConvertShape.cpp: ignore corrupt frames
	* convert/crusader/ConvertShapeCrusader.cpp: added some comments
	* tools/shapeconv/ShapeConv.cpp: added (unused) function for converting
	non-flex shapefiles

2002-12-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* various: minor cosmetic changes
	* filesys/*: added get_instance()
	* misc/util.*: added. (with to_uppercase function)
	* conf/XMLTree.cc: properly access files through filesystem

2002-12-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* conf/*: added Configuration classes
	* kernel/Application.*: create Configuration
	* bootstrap: check for /usr/local/share/aclocal
	* conf/ConfigNode.h: added missing set() function
	* conf/Configuration.h: some comments
	* conf/*: getSubkeys

2002-12-30  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* module.mk: updated
	* misc/Errors.h: compile error

2002-12-30  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/Errors.h graphics/GraphicsErrors.h : 'Unified' Error Code System

	* graphics/RenderSurface.* : RenderSurface Interface

	* graphics/SoftRenderSurface.* : SoftRenderSurface Implementation of
	  RenderSurface

	* misc/Rect.h : The useful Rect class

	* data/fixedfont.tga : Font for the console

	* graphics/Texture*.*, graphics/MD3_Model.* : Removed dependencies on
	  'old' and stuff I'm yet to commit

	* kernel/Application.* : Added some basic Painting and res setting code

	* kernel/Process.h : Explicitly set 'terminated' to false as you can't
	  assume that all compilers will zero the memory. *cough* I'm looking
	  at you gcc users. *cough*

	* misc/Console.* : Console Drawing

	* misc/pent_include.h : Minor update

	* usecode/UCStack.h : Fixing deleting of const pointers related issue

2002-12-30  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCMachine.cpp: global pointer dereferencing

2002-12-15  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*: bugfixes
	* kernel/Kernel.cpp: output UCMachine mem.stats on exit
	* usecode/*: indirect push/pop
	* usecode/*: 'for each'

2002-12-14  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*: basic call/ret support
	* usecode/*: function return values
	* usecode/*: stringlists
	* usecode/*: basic pointer opcodes, bugfixes
	* kernel/*: rearranged process queue a bit
	* usecode/*: spawn opcode
	* usecode/*: more pointer opcodes, partial spawn inline

2002-12-14  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* filesys/IDataSource.h, usecode/UCStack.h: const changes
	* usecode/*: minor changes
	* filesys/Flex.*: Flex reader
	* usecode/Usecode.h: abstract Usecode class
	* usecode/UsecodeFlex.*: Usecode Flex reader
	* kernel/Application.*: added FileSystem, load eusecode.flx

2002-12-13  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/UCList.h: usecode list
	* usecode/*: more opcodes, minor structure changes
	* kernel/Application: create UCMachine in Application

2002-12-13  Ryan Nunn <colourles@users.sourceforge.net>
	* tools/disasm/Disasm.cpp : Undoing my damage

2002-12-13  Ryan Nunn <colourles@users.sourceforge.net>
	* filesys/ODataSource.h	: Fixing a const problem
	* convert/Convert.h, tools/disasm/Disasm.cpp, tools/fold/CallNodes.cpp,
	  tools/fold/Folder.cpp, tools/fold/IfNode.cpp : MSVC hacks
	* graphics/*.* : General updates (I can't even remember what they are)

2002-12-11  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/*: minor changes
	* usecode/*: continued implementing opcodes
	* usecode/UCMachine.cpp: added some extra opcode notes
	(It won't compile atm because I haven't committed the Usecode class
	yet. Need to decide how to cache and/or store usecode.)

2002-12-10  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* usecode/*: starting on usecode machine
	* filesys/IDataSource.h: added IBufferDataSource
	* kernel/*.h: minor changes
	* misc/pent_include.h: #include <cassert.h>

2002-12-09  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* kernel/Kernel.*, Process.h: basic kernel classes
	* pentagram.cpp, kernel/Application.*: very basic application classes
	* various: updated build system for above
	* docs/u8anim.txt: some new insights (attack-related)

2002-12-04  Darke  <darkepaw@users.sf.net>
	* configure.in: Removed 'Is this Pentagram' flag; added dancer's
	  mmx/3dnow flags from exult's configure.in; added profiling options.
	* FAQ, docs/scratch/quotes.txt: updated.
	* convert/ConvertShape.*, convert/u8/ConvertShapeU8.h,
	  misc/Q_strcasecmp.*, tools/shapeconv/ShapeConv.cpp: Code tidying.
	* convert/Convert.h, convert/crusader/ConvertUsecodeCrusader.h,
	  convert/u8/ConvertUsecodeU8.h2:
	  Shuffled usecode parsing from disasm to them.
	* filesys/ODataSource.h: Added basic and somewhat b0rk3n OBufferSource.
	* filesys/IDataSource.h: Added correct #include.
	* misc/Console.h: fixed typedefs.
	* tools/disasm/Disasm.cpp: Split read opcode, from write opcode and
	  moved write opcode to convert/Convert.h.
	* tools/disasm/module.mk, module.mk, tools/fold/module.mk: Updated for
	  fold.
	* tools/fold: Added kinda-working decompiler. Yay!

2002-11-04  Darke  <darkepaw@users.sf.net>
	* convert/u8/ConvertUsecodeU8.h: Tidying function names.
	* filesys/ODataSource.h: Fixed compiler error.
	* misc/Console.h: Fixed 'nother compiler error.
	* tools/disasm/Disasm.cpp: Being pedantic.

	* misc/Console.h: Fixed a fix, that wasn't a fix.

2002-11-04  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/Console.* : Added methods for Console output redirection and
	  flags to enable/disable output to stdout and stderr. Added printf()
	  methods to pout and perr. Added vPrintf() methods to Console.

2002-11-03  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/Console.h: fixed endlines appearing out-of-order

2002-11-02  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* tools/disasm/module.mk: removed weird -I flag
	* Makefile.in: we don't have headers/ anymore
	* Makefile.in, bootstrap, tools/shapeconv/module.mk: build shapeconv
	* filesys/IDataSource.h: #include <fstream>
	* tools/shapeconv/ShapeConv.cpp: std::endl
	* various: added convert/u8 convert/crusader to modules list

2002-11-01  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* Makefile.in: tweaked dependency generation a bit

2002-11-01  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* */module.mk: changed .cc to .cpp

2002-10-31  Max Horn <max@quendi.de>
	* bootstrap: changed to be POSIX compliant (and work on OS X)
	* configure.in: cleaned up OS X section
	* misc/Console.h: changed to allow compilation on OS X

2002-10-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* bootstrap: removed Makefiles from convert/u8 convert/crusader
	* configure.in: removed kmid, fixed some cosmetic errors

2002-10-31  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* various: added some .cvsignore files
	* bootstrap: generate Makefiles automatically with proper relative path
	* genrules.pl: fixed typo

2002-10-30  Ryan Nunn <colourles@users.sourceforge.net>
	* convert/ConvertShape.*,  tools/shapeconv/ShapeConv.cpp : Fixing a few
	  shape conversion problems

	* tools/amf2mod/amf2mod.c : A simple Crusader AMF to MOD converter that
	  I found. Source should be platform portable.

2002-10-29  Ryan Nunn <colourles@users.sourceforge.net>
	* filesys/FileSystem.cpp : The functions will no longer throw
	  exceptions

	* misc/Console.* : Word Wrapping can now be toggled (not that the
	  feature is that useful currently). cour and cerr will now also be
	  word wrapped.

	* tools/shapeconv/ShapeConv.cpp : Correcting (my own) misuse of printf
	  instead of con.Printf().

2002-10-28  Ryan Nunn <colourles@users.sourceforge.net>
	* convert/ConvertShape.*, convert/crusader/ConvertShapeCrusader.*
	  convert/crusader/ConvertShapeCrusader.* : Shape Conversion

	* filesys/IDataSource.h : Added a few new read methods (read3 and
	  readX)

	* filesys/FileSystem.h, filesys\ODataSource.h : Added ODataSource

	* tools/shapeconv/ShapeConv.cpp : Crusader<->Ultima8 Shape flex
	  converter

2002-10-27  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* misc/Console.cpp: #include <cstdarg>
	* misc/Q_strcasecmp.cpp: case mismatch
	* tools/disasm/module.mk: added Console.o, Q_strcasecmp.o

2002-10-27  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/Console.h : Output Console

	* graphics/MD3_Model.*, graphics/TextureBitmap.cpp, misc/Args.cpp
	  misc/pent_include.h, convert/crusader/ConvertUsecodeCrusader.h,
	  tools/disasm/Disasm.cpp, convert/u8/ConvertUsecodeU8.h :
	  Changes to use Output Console functions/streams instead  of standard
	  outout functions/streams

2002-10-26  Ryan Nunn <colourles@users.sourceforge.net>
	* tools/disasm/Disasm.cpp : Autodetect gametype. Improved u8 function
	  name printing.

2002-10-26  Ryan Nunn <colourles@users.sourceforge.net>
	* Q_strcasecmp.* : Portable case insensitive compare from Quake 2
	* tools/disasm/Disasm.cpp : use Q_strcasecmp() instead of stricmp()

2002-10-26  Ryan Nunn <colourles@users.sourceforge.net>
	* misc/pent_include.* : File to the included at the top of every
	  source file (this is not an option, it must be included). It will
	  include config.h. It will also include common_type.h and define some
	  useful things. It can double as a pre-compiled header for those
	  systems that support it.

	* misc/common_types.h : Removed some stuff and put them in
	  pent_include.h

	* misc/Args.cpp, filesys/FileSystem.cpp : Include pent_include.h

	* filesys/IDataSource.h: : Fixing a few virtual function issues

	* convert/Convert.h,  convert/crusader/ConvertUsecodeCrusader.h,
	  convert/u8/ConvertUsecodeU8.h : Changes for TGWDS

	* tools/disasm/Disasm.cpp : Getting to compile in MSVC. Changes for
	  TGWDS. Added some loopscript stuff

2002-10-07  Ryan Nunn <colourles@users.sourceforge.net>
	* graphics/ : Pretty obvious what this is for, but don't expect
	  anything in there to work quite yet. Files are missing
	* graphics/Texture*.* : Some basic 32 bit Texture classes.
	* graphics/MD3_Model.* : Classes to load and use MD3 models.
	* ChangeLog : Changed my email address

2002-09-22  Darke  <darkepaw@users.sf.net>
	* convert/crusader/ConvertUsecodeCrusader.h, filesys/FileSystem.h,
	  tools/disasm/Disasm.cpp: Docs & code cleanup.

2002-09-22  Darke  <darkepaw@users.sf.net>
	* convert/*,tools/disasm/*: Moved more of the game specific usecode
	  handling to convert; Fixed up a couple of the opcode's docs.

2002-09-22  Darke  <darkepaw@users.sf.net>
	* misc/[Aa]rgs.*: Missed changing a header name.
	* filesys/*: All the file systems stuff. The primary FileSystem class
	  is rather bare and not completely correct, but good enough to use
	  it's basic features.
	* tools/disasm/*: Updated disasm to use the new DataSource classes.


2002-09-08  Darke  <darkepaw@users.sf.net>
	* tools/disasm/Disasm.cpp: All opcodes known, yay! Now we just have
	to figure out how they work. *grin*

2002-08-31  Darke  <darkepaw@users.sf.net>
	* various: filename changes from .cc to .cpp so that VisualC++ can wrap
	  it's poor little mind around them. *grin*

2002-08-26  Darke  <darkepaw@users.sf.net>
	* convert/, tools/disasm/, misc/args.*: type cleanup and abstraction.

2002-08-25  Darke  <darkepaw@users.sf.net>
	* *: Added the makefile system, a few docs, and the required files to
	  compile disasm.cc. Hopefully it works, although I expect it not to.
	  *grin*

2002-08-06  Ryan Nunn <colourles@users.sourceforge.net>
	* docs/musicflx.txt : Updated info about one of the flex entries

2002-05-22  Ryan Nunn <colourles@users.sourceforge.net>
	* docs/design/classes.txt : Added some more classes. Added more details
	  about the functions of various classes. Corrected a few errors with
	  some of the classes.

2002-05-22  Ryan Nunn <colourles@users.sourceforge.net>
	* docs/u8skf.txt : Some initial work on decoding the skf files. Is a
	  work in progress
	* docs/design/classes.txt : Some proposed classes for Pentagram. Work
	  in progress.

2002-05-22  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* docs/*: imported docs/ directory

2002-05-21  Willem Jan Palenstijn <wjpalenstijn@users.sourceforge.net>
	* Started new pentagram CVS repository

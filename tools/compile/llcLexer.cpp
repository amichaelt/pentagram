#line 2 "tools/compile/llcLexer.cpp"

#line 4 "tools/compile/llcLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer llcFlexLexer
#include "pent_include.h"
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) (static_cast<unsigned int>(static_cast<unsigned char>(c)))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *llcalloc (yy_size_t  );
void *llcrealloc (void *,yy_size_t  );
void llcfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "llcLexer.h"

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[469] =
    {   0,
        3,    3,  118,  116,  117,   13,  116,  117,   13,  117,
       70,  116,  117,  116,  117,  116,  117,   78,  116,  117,
      116,  117,   30,  116,  117,   31,  116,  117,   51,  116,
      117,   53,  116,  117,   33,  116,  117,   54,  116,  117,
       32,  116,  117,   52,  116,  117,    9,  116,  117,    9,
      116,  117,   35,  116,  117,   34,  116,  117,   72,  116,
      117,   65,  116,  117,   74,  116,  117,  108,  116,  117,
      108,  116,  117,  108,  116,  117,  108,  116,  117,  108,
      116,  117,  108,  116,  117,  108,  116,  117,  108,  116,
      117,  108,  116,  117,  108,  116,  117,  108,  116,  117,

       87,  116,  117,   88,  116,  117,   57,  116,  117,  108,
      116,  117,  108,  116,  117,  108,  116,  117,  108,  116,
      117,  108,  116,  117,  108,  116,  117,  108,  116,  117,
      108,  116,  117,  108,  116,  117,  108,  116,  117,  108,
      116,  117,  108,  116,  117,  108,  116,  117,  108,  116,
      117,  108,  116,  117,  108,  116,  117,  108,  116,  117,
       28,  116,  117,   79,  116,  117,   29,  116,  117,   80,
      116,  117,    3,  117,    4,  117,    5,  117,  115,  117,
      113,  115,  117,  113,  114,  117,  115,  117,   13,   77,
       11,   66,   81,   12,   58,   63,   60,   64,    9,   61,

        2,   59,   36,   85,   73,   76,   75,   86,  107,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   37,   38,   62,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   89,  108,  108,
      108,  108,  108,   69,  108,  108,  108,  108,  108,  108,
      108,  108,  108,   82,   68,    3,    4,    5,    6,    5,
        7,  113,    1,    8,   10,   47,   48,  108,  108,  108,
      108,   19,  108,  108,  108,  108,  108,  108,  108,  108,
       67,  108,  105,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108, 8283,16475,  108,  108,   55,  108,   71,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  101,
      108,  108, 8282,16474,   49,   50,   14,  108,   16,  108,
      108,  108,  108,   23,  108,  108,  108,  108,  108,   17,
      108,  108,  108,   96,  108,  108,  108,  108,   92,  108,
      108,  108,  108, 8283,  107,  108,  104,  100,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   83,  108,  108,
     8282,  108,   25,  108,   18,  108,  108,  108,  108,  108,
      108,  108,   98,  108,  102,  108,  108,  108,  108,   84,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  111,  112,  110,  108,  108,  108,   21,  108,

      108,   27,  108,   22,  108,  108,  108,  108,  108,  108,
      108,   56,  108,  108,  108,  108,   46,  108,   39,  108,
      108,  108, 8285,16477,  109,   15,  108,  108,   20,  108,
       24,  108,  108,  108,   97,  108,   43,  108,   94,  108,
      108,  108,   42,  108,  108,   41,  108,   40,  108, 8285,
      107,   26,  108,   99,  108,  103,  108,   45,  108,  108,
      108,   95,  108,  106,  108,  108,   44,  108
    } ;

static yyconst flex_int16_t yy_accept[334] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    4,    6,    9,
       11,   14,   16,   18,   21,   23,   26,   29,   32,   35,
       38,   41,   44,   47,   50,   53,   56,   59,   62,   65,
       68,   71,   74,   77,   80,   83,   86,   89,   92,   95,
       98,  101,  104,  107,  110,  113,  116,  119,  122,  125,
      128,  131,  134,  137,  140,  143,  146,  149,  152,  155,
      158,  161,  164,  167,  170,  173,  175,  177,  179,  181,
      184,  187,  189,  190,  191,  191,  192,  192,  192,  193,
      194,  194,  195,  196,  197,  198,  199,  200,  201,  202,
      202,  203,  203,  203,  204,  205,  206,  207,  208,  209,

      209,  210,  211,  212,  213,  214,  215,  216,  217,  218,
      219,  220,  221,  222,  223,  224,  225,  226,  227,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      240,  241,  242,  243,  244,  246,  247,  248,  249,  250,
      251,  252,  253,  254,  255,  256,  257,  258,  259,  260,
      261,  262,  263,  263,  263,  263,  263,  263,  263,  264,
      265,  266,  267,  268,  269,  270,  271,  272,  274,  275,
      276,  277,  278,  279,  280,  281,  283,  285,  286,  287,
      288,  289,  290,  291,  292,  293,  294,  296,  297,  297,
      298,  300,  302,  303,  304,  305,  306,  307,  308,  309,

      310,  312,  313,  313,  313,  313,  313,  315,  316,  317,
      319,  321,  322,  323,  324,  326,  327,  328,  329,  330,
      332,  333,  334,  336,  337,  338,  339,  341,  342,  343,
      344,  346,  347,  348,  350,  351,  352,  353,  354,  355,
      356,  357,  358,  360,  361,  361,  361,  361,  361,  362,
      363,  365,  367,  368,  369,  370,  371,  372,  373,  375,
      377,  378,  379,  380,  382,  383,  384,  385,  386,  387,
      388,  389,  390,  391,  392,  393,  394,  395,  396,  396,
      397,  398,  399,  401,  402,  404,  406,  407,  408,  409,
      410,  411,  412,  414,  415,  416,  417,  419,  421,  422,

      423,  425,  426,  428,  429,  431,  433,  434,  435,  437,
      439,  441,  442,  443,  445,  446,  448,  450,  452,  454,
      454,  456,  458,  460,  461,  461,  462,  464,  465,  466,
      467,  469,  469
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   31,   32,   31,   31,   33,   31,   34,   31,   35,
       31,   36,   37,   31,   31,   31,   38,   39,   31,   31,
       40,    1,   41,   42,   31,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   31,   52,   53,   54,   55,
       56,   57,   31,   58,   59,   60,   61,   62,   63,   64,
       65,   31,   66,   67,   68,   69,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[70] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    2,    1,
        3,    1,    1,    1,    1,    1,    4,    4,    4,    1,
        1,    1,    1,    1,    4,    4,    4,    4,    4,    4,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[342] =
    {   0,
        0,    0,   67,   68,   70,   72,  330, 1262,   74,   78,
      293,  307,   35,   76,  299, 1262, 1262,  282,   72, 1262,
       71, 1262,   80,   87,   83,  283, 1262,   92, 1262,   69,
      115,  118,  120,  130,  132,  134,  143,  145,  147,  155,
      157,  246,  243,  244,  168,  160,  177,  187,  179,  196,
      200,  208,  219,  222,  233,  235,  238,  247,  251,  259,
      263, 1262,   75, 1262, 1262,  260, 1262,  162, 1262,  105,
      189,  137,  204, 1262,  246, 1262,  165,  179, 1262, 1262,
      211, 1262, 1262, 1262, 1262, 1262,  252, 1262, 1262,  213,
     1262,  228,    0, 1262,  190, 1262, 1262, 1262,  184,  271,

     1262,  274,  279,  287,  295,  297,  308,  312,  320,  322,
      317,  325,  330, 1262, 1262, 1262,  334,  339,  342,  352,
      354,  363,  367,  375,  384,  388,  392,  400,  402,  405,
      415,  417,  425,  427,  429,  437,  439,  447,  450,  458,
      460,  463,  472, 1262, 1262,  197, 1262,  276, 1262,  467,
     1262,  255,  172,  170,  168,  127,  299,  158, 1262,  341,
        0,  132,  130,  477,  487,  491,  495,  499,  510,  513,
      522,  526,  524,  534,  536,  538,  546,  549,  557,  559,
      562,  580,  582,  584,  593,  596,  598,  606,  608,  610,
      618,  622,  630,  632,  645,  647,  655,  657,  665,  667,

      669,  678,  112,  103,  102,   83,  680, 1262, 1262,  682,
      690,  692,  694,  702,  710,  718,  721,  723,  732,  734,
      736,  744,  746,  754,  757,  759,  768,  770,  782,  790,
     1262,  786, 1262,  795,  798,  800,  803,  808,  812,  816,
      821,  832,  834,  836,   95,   88,   85,   67, 1262,  845,
      853,  855,  858,  866,  868,  878,  882,  890,  892,  895,
      900,  904,  908,  916,  918,  920,  930,  932,  935,  943,
      956,  958,  966,  970,  974, 1262, 1262, 1262,   50,  978,
      982,  987,  990,  995,  998, 1003, 1006, 1008, 1017, 1020,
     1025, 1029, 1033, 1037, 1041, 1045, 1049, 1053, 1057, 1061,

     1069, 1262, 1079, 1081, 1083, 1092, 1096, 1100, 1108, 1110,
     1112, 1120, 1122, 1124, 1133, 1135, 1137, 1262, 1146, 1148,
     1150, 1158, 1160, 1162,   49, 1171, 1173, 1262, 1175, 1183,
     1185, 1262, 1230, 1234, 1238, 1242, 1245, 1249, 1253, 1257,
       83
    } ;

static yyconst flex_int16_t yy_def[342] =
    {   0,
      332,    1,  333,  333,  334,  334,  332,  332,  332,  332,
      332,  335,  332,  332,  336,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  332,  332,  332,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  332,  332,  332,  332,  338,  332,  339,  332,  332,
      332,  332,  332,  332,  335,  332,  332,  332,  332,  332,
      336,  332,  332,  332,  332,  332,  332,  332,  332,  340,
      332,  332,  341,  332,  332,  332,  332,  332,  332,  332,

      332,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  332,  332,  332,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  332,  332,  338,  332,  339,  332,  339,
      332,  332,  332,  332,  332,  332,  332,  340,  332,  332,
      341,  332,  332,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  332,  337,  332,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,

      337,  337,  332,  332,  332,  332,  332,  332,  332,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      332,  337,  332,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  332,  332,  332,  332,  332,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  332,  332,  332,  332,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  337,  337,  337,

      332,  332,  337,  337,  337,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  332,  337,  332,
      337,  337,  337,  337,  332,  337,  337,  332,  337,  337,
      337,    0,  332,  332,  332,  332,  332,  332,  332,  332,
      332
    } ;

static yyconst flex_int16_t yy_nxt[1332] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   31,   31,
       31,   35,   36,   37,   38,   39,   40,   41,   31,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   31,   31,
       51,   31,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   31,   61,   31,   31,   62,   63,   64,   65,   67,
       67,   70,   71,   70,   71,   73,   73,   68,   68,   73,
       73,   77,   79,   84,   86,   78,  161,   87,   87,   87,
       89,   98,   99,   88,   85,   90,  328,  144,   80,   87,

       87,   87,   91,   87,   87,   87,  152,  152,   72,  302,
       72,  279,   92,   95,   96,   97,  100,  100,  278,  100,
      100,  100,  100,  101,  277,   93,  101,  276,  101,  248,
       92,  100,  100,  100,  100,  100,  100,  247,  101,  246,
      101,  145,  101,  245,  100,  100,  100,  100,  100,  100,
       93,  101,  209,  101,  208,  101,  100,  100,  100,  100,
      159,  100,  100,  101,  149,  101,  153,  106,  101,  100,
      100,  154,  150,  103,  155,  105,  101,  151,  100,  100,
      100,  100,  104,  206,  108,  101,  107,  101,  100,  100,
      152,  152,  205,  111,  204,  101,  203,  100,  100,  147,

      110,  100,  100,  109,  101,   73,   73,  163,  101,  100,
      100,  162,  113,  117,  112,  159,  101,  120,   82,  121,
      100,  100,  118,  100,  100,  119,  157,  101,  156,  122,
      101,  125,  123,  124,  100,  100,  100,  100,  127,  100,
      100,  101,  126,  101,  160,  160,  101,  129,  100,  100,
       76,  128,  100,  100,  130,  101,  152,  152,  131,  101,
      100,  100,  147,  132,  100,  100,  116,  101,   87,   87,
       87,  101,  100,  100,  133,  100,  100,  134,  149,  101,
      100,  100,  101,  115,  138,  114,  332,  101,  100,  100,
      135,  332,  137,  139,  136,  101,  100,  100,  100,  100,

      207,  207,   94,  101,   83,  101,   82,  140,  141,  100,
      100,   76,  143,  100,  100,   74,  101,  142,  100,  100,
      101,  100,  100,  100,  100,  101,  100,  100,  101,  332,
      101,  100,  100,  101,  164,  100,  100,  332,  101,  332,
      100,  100,  101,  100,  100,  332,  165,  101,  332,  166,
      101,  332,  167,  100,  100,  100,  100,  160,  160,  172,
      101,  332,  101,  332,  100,  100,  332,  168,  100,  100,
      169,  101,  171,  170,  332,  101,  100,  100,  332,  175,
      332,  332,  173,  101,  176,  100,  100,  174,  177,  100,
      100,  332,  101,  100,  100,  332,  101,  332,  178,  332,

      101,  100,  100,  187,  187,  180,  100,  100,  101,  332,
      101,  332,  179,  101,  332,  332,  189,  189,  100,  100,
      332,  181,  182,  101,  332,  101,  100,  100,  100,  100,
      100,  100,  184,  101,  332,  101,  332,  101,  100,  100,
      100,  100,  183,  332,  185,  101,  332,  101,  100,  100,
      332,  100,  100,  332,  188,  101,  332,  186,  101,  100,
      100,  100,  100,  332,  100,  100,  101,  332,  101,  149,
      191,  101,  190,  100,  100,  332,  332,  150,  100,  100,
      101,  332,  151,  193,  332,  101,  192,  332,  100,  100,
      332,  195,  100,  100,  194,  101,  100,  100,  332,  101,

      100,  100,  332,  101,  332,  196,  197,  101,  332,  201,
      198,  100,  100,  332,  100,  100,  199,  332,  101,  332,
      200,  101,  202,  100,  100,  100,  100,  100,  100,  210,
      101,  332,  101,  211,  101,  100,  100,  100,  100,  100,
      100,  332,  101,  332,  101,  214,  101,  100,  100,  212,
      100,  100,  213,  332,  101,  332,  216,  101,  100,  100,
      100,  100,  332,  100,  100,  101,  332,  101,  332,  215,
      101,  332,  332,  332,  219,  332,  217,  332,  218,  220,
      332,  100,  100,  100,  100,  100,  100,  332,  101,  332,
      101,  222,  101,  221,  100,  100,  332,  100,  100,  187,

      187,  101,  332,  223,  101,  332,  231,  100,  100,  189,
      189,  100,  100,  332,  101,  332,  101,  224,  101,  100,
      100,  225,  226,  100,  100,  332,  101,  332,  227,  332,
      101,  100,  100,  100,  100,  332,  228,  332,  101,  332,
      101,  332,  230,  332,  332,  332,  100,  100,  100,  100,
      233,  229,  232,  101,  332,  101,  100,  100,  100,  100,
      332,  234,  332,  101,  332,  101,  100,  100,  100,  100,
      100,  100,  332,  101,  332,  101,  237,  101,  235,  100,
      100,  207,  207,  100,  100,  332,  101,  236,  249,  332,
      101,  100,  100,  100,  100,  100,  100,  332,  101,  332,

      101,  332,  101,  100,  100,  238,  332,  239,  332,  332,
      101,  100,  100,  243,  332,  240,  241,  332,  101,  100,
      100,  242,  100,  100,  100,  100,  101,  332,  250,  101,
      244,  101,  332,  100,  100,  100,  100,  100,  100,  252,
      101,  332,  101,  332,  101,  100,  100,  100,  100,  332,
      253,  251,  101,  332,  101,  100,  100,  332,  100,  100,
      100,  100,  101,  332,  254,  101,  332,  101,  332,  100,
      100,  100,  100,  332,  332,  256,  101,  332,  101,  332,
      255,  332,  258,  100,  100,  332,  257,  100,  100,  332,
      101,  100,  100,  332,  101,  259,  100,  100,  101,  100,

      100,  100,  100,  101,  100,  100,  101,  261,  101,  100,
      100,  101,  260,  100,  100,  332,  101,  100,  100,  262,
      101,  332,  100,  100,  101,  332,  332,  332,  264,  101,
      263,  332,  265,  100,  100,  100,  100,  100,  100,  332,
      101,  332,  101,  266,  101,  332,  100,  100,  332,  269,
      267,  332,  268,  101,  100,  100,  100,  100,  332,  100,
      100,  101,  332,  101,  271,  270,  101,  100,  100,  100,
      100,  273,  332,  272,  101,  332,  101,  332,  274,  100,
      100,  332,  275,  100,  100,  332,  101,  280,  332,  332,
      101,  100,  100,  100,  100,  281,  100,  100,  101,  332,

      101,  100,  100,  101,  282,  100,  100,  332,  101,  100,
      100,  332,  101,  332,  284,  332,  101,  100,  100,  100,
      100,  100,  100,  283,  101,  332,  101,  332,  101,  332,
      286,  100,  100,  100,  100,  332,  100,  100,  101,  332,
      101,  332,  285,  101,  100,  100,  332,  332,  287,  332,
      332,  101,  332,  290,  288,  332,  289,  100,  100,  100,
      100,  332,  291,  332,  101,  332,  101,  100,  100,  332,
      292,  100,  100,  332,  101,  301,  301,  332,  101,  100,
      100,  332,  101,  100,  100,  293,  101,  294,  100,  100,
      101,  100,  100,  295,  332,  101,  100,  100,  101,  100,

      100,  296,  332,  101,  100,  100,  101,  100,  100,  100,
      100,  101,  298,  332,  101,  297,  101,  332,  100,  100,
      299,  100,  100,  332,  300,  101,  100,  100,  101,  332,
      100,  100,  303,  101,  100,  100,  304,  101,  100,  100,
      332,  101,  100,  100,  305,  101,  100,  100,  332,  101,
      100,  100,  306,  101,  100,  100,  332,  101,  100,  100,
      332,  101,  100,  100,  307,  101,  310,  332,  308,  101,
      301,  301,  332,  332,  311,  332,  309,  318,  332,  313,
      100,  100,  100,  100,  100,  100,  332,  101,  312,  101,
      332,  101,  332,  100,  100,  315,  332,  320,  320,  314,

      101,  100,  100,  316,  101,  332,  317,  332,  101,  100,
      100,  100,  100,  100,  100,  332,  101,  332,  101,  332,
      101,  100,  100,  100,  100,  100,  100,  332,  101,  332,
      101,  332,  101,  332,  100,  100,  100,  100,  100,  100,
      319,  101,  332,  101,  332,  101,  321,  100,  100,  320,
      320,  100,  100,  332,  101,  332,  101,  332,  101,  100,
      100,  100,  100,  100,  100,  332,  101,  323,  101,  332,
      101,  332,  100,  100,  100,  100,  100,  100,  322,  101,
      332,  101,  332,  101,  100,  100,  100,  100,  332,  332,
      332,  101,  332,  101,  324,  332,  332,  332,  332,  332,

      332,  332,  326,  325,  332,  332,  332,  332,  327,  332,
      332,  332,  332,  332,  329,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  330,  332,  331,
       66,   66,   66,   66,   69,   69,   69,   69,   75,   75,
       75,   75,   81,   81,   81,   81,  102,  332,  102,  146,
      146,  332,  146,  148,  148,  148,  148,  158,  158,  158,
      158,    7,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332
    } ;

static yyconst flex_int16_t yy_chk[1332] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        4,    5,    5,    6,    6,    9,    9,    3,    4,   10,
       10,   13,   14,   19,   21,   13,  341,   21,   21,   21,
       23,   30,   30,   21,   19,   23,  325,   63,   14,   25,

       25,   25,   23,   24,   24,   24,   70,   70,    5,  279,
        6,  248,   24,   28,   28,   28,   31,   31,  247,   32,
       32,   33,   33,   31,  246,   24,   32,  245,   33,  206,
       24,   34,   34,   35,   35,   36,   36,  205,   34,  204,
       35,   63,   36,  203,   37,   37,   38,   38,   39,   39,
       24,   37,  163,   38,  162,   39,   40,   40,   41,   41,
      158,   46,   46,   40,   68,   41,   72,   34,   46,   45,
       45,   72,   68,   32,   72,   33,   45,   68,   47,   47,
       49,   49,   32,  156,   36,   47,   35,   49,   48,   48,
       71,   71,  155,   39,  154,   48,  153,   50,   50,  146,

       38,   51,   51,   37,   50,   73,   73,   99,   51,   52,
       52,   95,   41,   45,   40,   90,   52,   46,   81,   47,
       53,   53,   45,   54,   54,   45,   78,   53,   77,   47,
       54,   49,   47,   48,   55,   55,   56,   56,   50,   57,
       57,   55,   49,   56,   92,   92,   57,   51,   58,   58,
       75,   50,   59,   59,   51,   58,  152,  152,   51,   59,
       60,   60,   66,   52,   61,   61,   44,   60,   87,   87,
       87,   61,  100,  100,   53,  102,  102,   54,  148,  100,
      103,  103,  102,   43,   57,   42,  148,  103,  104,  104,
       55,  148,   56,   57,   55,  104,  105,  105,  106,  106,

      157,  157,   26,  105,   18,  106,   15,   58,   59,  107,
      107,   12,   61,  108,  108,   11,  107,   60,  111,  111,
      108,  109,  109,  110,  110,  111,  112,  112,  109,    7,
      110,  113,  113,  112,  103,  117,  117,    0,  113,    0,
      118,  118,  117,  119,  119,    0,  104,  118,    0,  105,
      119,    0,  106,  120,  120,  121,  121,  160,  160,  111,
      120,    0,  121,    0,  122,  122,    0,  107,  123,  123,
      108,  122,  110,  109,    0,  123,  124,  124,    0,  117,
        0,    0,  112,  124,  118,  125,  125,  113,  119,  126,
      126,    0,  125,  127,  127,    0,  126,    0,  120,    0,

      127,  128,  128,  129,  129,  122,  130,  130,  128,    0,
      129,    0,  121,  130,    0,    0,  131,  131,  132,  132,
        0,  123,  124,  131,    0,  132,  133,  133,  134,  134,
      135,  135,  126,  133,    0,  134,    0,  135,  136,  136,
      137,  137,  125,    0,  127,  136,    0,  137,  138,  138,
        0,  139,  139,    0,  130,  138,    0,  128,  139,  140,
      140,  141,  141,    0,  142,  142,  140,    0,  141,  150,
      133,  142,  132,  143,  143,    0,    0,  150,  164,  164,
      143,    0,  150,  136,    0,  164,  134,    0,  165,  165,
        0,  138,  166,  166,  137,  165,  167,  167,    0,  166,

      168,  168,    0,  167,    0,  138,  138,  168,    0,  142,
      139,  169,  169,    0,  170,  170,  140,    0,  169,    0,
      141,  170,  143,  171,  171,  173,  173,  172,  172,  164,
      171,    0,  173,  165,  172,  174,  174,  175,  175,  176,
      176,    0,  174,    0,  175,  168,  176,  177,  177,  166,
      178,  178,  167,    0,  177,    0,  170,  178,  179,  179,
      180,  180,    0,  181,  181,  179,    0,  180,    0,  169,
      181,    0,    0,    0,  173,    0,  171,    0,  172,  174,
        0,  182,  182,  183,  183,  184,  184,    0,  182,    0,
      183,  178,  184,  175,  185,  185,    0,  186,  186,  187,

      187,  185,    0,  179,  186,    0,  187,  188,  188,  189,
      189,  190,  190,    0,  188,    0,  189,  180,  190,  191,
      191,  181,  182,  192,  192,    0,  191,    0,  183,    0,
      192,  193,  193,  194,  194,    0,  184,    0,  193,    0,
      194,    0,  186,    0,    0,    0,  195,  195,  196,  196,
      189,  185,  188,  195,    0,  196,  197,  197,  198,  198,
        0,  190,    0,  197,    0,  198,  199,  199,  200,  200,
      201,  201,    0,  199,    0,  200,  194,  201,  191,  202,
      202,  207,  207,  210,  210,    0,  202,  193,  207,    0,
      210,  211,  211,  212,  212,  213,  213,    0,  211,    0,

      212,    0,  213,  214,  214,  195,    0,  196,    0,    0,
      214,  215,  215,  200,    0,  197,  198,    0,  215,  216,
      216,  199,  217,  217,  218,  218,  216,    0,  210,  217,
      202,  218,    0,  219,  219,  220,  220,  221,  221,  213,
      219,    0,  220,    0,  221,  222,  222,  223,  223,    0,
      214,  212,  222,    0,  223,  224,  224,    0,  225,  225,
      226,  226,  224,    0,  216,  225,    0,  226,    0,  227,
      227,  228,  228,    0,    0,  218,  227,    0,  228,    0,
      217,    0,  221,  229,  229,    0,  219,  232,  232,    0,
      229,  230,  230,    0,  232,  222,  234,  234,  230,  235,

      235,  236,  236,  234,  237,  237,  235,  225,  236,  238,
      238,  237,  224,  239,  239,    0,  238,  240,  240,  226,
      239,    0,  241,  241,  240,    0,    0,    0,  229,  241,
      228,    0,  230,  242,  242,  243,  243,  244,  244,    0,
      242,    0,  243,  232,  244,    0,  250,  250,    0,  237,
      235,    0,  236,  250,  251,  251,  252,  252,    0,  253,
      253,  251,    0,  252,  239,  238,  253,  254,  254,  255,
      255,  241,    0,  240,  254,    0,  255,    0,  242,  256,
      256,    0,  244,  257,  257,    0,  256,  250,    0,    0,
      257,  258,  258,  259,  259,  251,  260,  260,  258,    0,

      259,  261,  261,  260,  253,  262,  262,    0,  261,  263,
      263,    0,  262,    0,  255,    0,  263,  264,  264,  265,
      265,  266,  266,  254,  264,    0,  265,    0,  266,    0,
      257,  267,  267,  268,  268,    0,  269,  269,  267,    0,
      268,    0,  256,  269,  270,  270,    0,    0,  258,    0,
        0,  270,    0,  263,  261,    0,  262,  271,  271,  272,
      272,    0,  265,    0,  271,    0,  272,  273,  273,    0,
      266,  274,  274,    0,  273,  275,  275,    0,  274,  280,
      280,    0,  275,  281,  281,  267,  280,  268,  282,  282,
      281,  283,  283,  269,    0,  282,  284,  284,  283,  285,

      285,  270,    0,  284,  286,  286,  285,  287,  287,  288,
      288,  286,  272,    0,  287,  271,  288,    0,  289,  289,
      273,  290,  290,    0,  274,  289,  291,  291,  290,    0,
      292,  292,  280,  291,  293,  293,  281,  292,  294,  294,
        0,  293,  295,  295,  282,  294,  296,  296,    0,  295,
      297,  297,  284,  296,  298,  298,    0,  297,  299,  299,
        0,  298,  300,  300,  287,  299,  290,    0,  288,  300,
      301,  301,    0,    0,  291,    0,  289,  301,    0,  294,
      303,  303,  304,  304,  305,  305,    0,  303,  292,  304,
        0,  305,    0,  306,  306,  296,    0,  307,  307,  295,

      306,  308,  308,  299,  307,    0,  300,    0,  308,  309,
      309,  310,  310,  311,  311,    0,  309,    0,  310,    0,
      311,  312,  312,  313,  313,  314,  314,    0,  312,    0,
      313,    0,  314,    0,  315,  315,  316,  316,  317,  317,
      304,  315,    0,  316,    0,  317,  308,  319,  319,  320,
      320,  321,  321,    0,  319,    0,  320,    0,  321,  322,
      322,  323,  323,  324,  324,    0,  322,  313,  323,    0,
      324,    0,  326,  326,  327,  327,  329,  329,  312,  326,
        0,  327,    0,  329,  330,  330,  331,  331,    0,    0,
        0,  330,    0,  331,  315,    0,    0,    0,    0,    0,

        0,    0,  323,  320,    0,    0,    0,    0,  324,    0,
        0,    0,    0,    0,  326,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  329,    0,  330,
      333,  333,  333,  333,  334,  334,  334,  334,  335,  335,
      335,  335,  336,  336,  336,  336,  337,    0,  337,  338,
      338,    0,  338,  339,  339,  339,  339,  340,  340,  340,
      340,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,

      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  332,  332,  332,  332,  332,  332,
      332
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[118] =
    {   0,
1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,     };

static yyconst flex_int16_t yy_rule_linenum[117] =
    {   0,
       52,   54,   57,   58,   59,   60,   61,   68,   70,   72,
       74,   76,   82,   88,   89,   91,   93,   94,   99,  100,
      101,  103,  107,  108,  112,  113,  114,  120,  121,  122,
      123,  124,  125,  126,  127,  128,  129,  130,  132,  133,
      135,  136,  138,  140,  141,  143,  149,  150,  151,  152,
      158,  159,  160,  161,  162,  163,  164,  166,  167,  168,
      169,  170,  171,  172,  174,  180,  181,  182,  183,  184,
      185,  187,  188,  189,  190,  191,  192,  194,  195,  196,
      197,  198,  200,  201,  207,  208,  210,  211,  213,  219,
      220,  221,  222,  223,  224,  225,  226,  227,  228,  237,

      238,  244,  245,  246,  247,  248,  254,  256,  262,  265,
      266,  267,  268,  269,  272,  281
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = yy_full_lp; /* restore orig. accepting pos. */ \
(yy_state_ptr) = yy_full_state; /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "tools/compile/llcLexer.l"
#line 2 "tools/compile/llcLexer.l"
#include "llcTokens.h"

// just to 'simply' things
// spits out a short performance warning
// to make things easier I hope. *grin*
// only for debugging
// enable start state stacks (say *that* three times fast!)

// needs to handle 'escape quoting' of '\\\"' in the string
#line 985 "tools/compile/llcLexer.cpp"

#define INITIAL 0
#define CCOMMENT 1
#define HASH_EXPECT 2

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-reentrant */
/* %endif */
/* %if-bison-bridge */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 46 "tools/compile/llcLexer.l"


 /***************************************************************************
	Comment handling
  ***************************************************************************/

#line 1147 "tools/compile/llcLexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)llcalloc(YY_BUF_SIZE + 2  );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = static_cast<int>(yy_def[yy_current_state]);
				if ( yy_current_state >= 333 )
					yy_c = yy_meta[static_cast<unsigned int>(yy_c)];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + static_cast<unsigned int>(yy_c)];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 332 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					yy_full_state = (yy_state_ptr);
					yy_full_lp = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 117 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 117 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 118 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 54 "tools/compile/llcLexer.l"
{ BEGIN(CCOMMENT);		}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 57 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 58 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 60 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "tools/compile/llcLexer.l"
{ BEGIN(INITIAL); }
	YY_BREAK

/***************************************************************************
	Constants
  ***************************************************************************/
case 8:
YY_RULE_SETUP
#line 68 "tools/compile/llcLexer.l"
{ return LLC_INTEGER;	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "tools/compile/llcLexer.l"
{ return LLC_INTEGER;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 72 "tools/compile/llcLexer.l"
{ return LLC_INTEGER;	}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 74 "tools/compile/llcLexer.l"
{ return LLC_STRING;	}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 76 "tools/compile/llcLexer.l"
{ return LLC_CSTRING;	}
	YY_BREAK
/***************************************************************************
	Whitespace
  ***************************************************************************/
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 82 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
/***************************************************************************
	Variable types
  ***************************************************************************/
case 14:
YY_RULE_SETUP
#line 88 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 89 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 91 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 93 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 94 "tools/compile/llcLexer.l"
{ return LLC_DWORD;		}
	YY_BREAK
/* Unsure if the default 'number' should be WORD or DWORD, shall find out soon enough
    we shall... */
case 19:
YY_RULE_SETUP
#line 99 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 100 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 101 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 103 "tools/compile/llcLexer.l"
{ return LLC_STRING;	}
	YY_BREAK
/* Postfix modifiers... */
case 23:
YY_RULE_SETUP
#line 107 "tools/compile/llcLexer.l"
{ return LLC_LIST;		}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "tools/compile/llcLexer.l"
{ return LLC_POINTER;	}
	YY_BREAK
/* Prefix modifiers... */
case 25:
YY_RULE_SETUP
#line 112 "tools/compile/llcLexer.l"
{ return LLC_CONST;		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 113 "tools/compile/llcLexer.l"
{ return LLC_CONST;		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 114 "tools/compile/llcLexer.l"
{ return LLC_REALLY;	}
	YY_BREAK
/***************************************************************************
	Function bits
  ***************************************************************************/
case 28:
YY_RULE_SETUP
#line 120 "tools/compile/llcLexer.l"
{ return LLC_OPEN_BRACE;		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 121 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_BRACE;		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 122 "tools/compile/llcLexer.l"
{ return LLC_OPEN_PAREN;		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 123 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_PAREN;		}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 124 "tools/compile/llcLexer.l"
{ return LLC_DOT;				}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 125 "tools/compile/llcLexer.l"
{ return LLC_COMMA;				}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 126 "tools/compile/llcLexer.l"
{ return LLC_SEMICOLON;			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 127 "tools/compile/llcLexer.l"
{ return LLC_COLON;				}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 128 "tools/compile/llcLexer.l"
{ return LLC_DCOLON;			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 129 "tools/compile/llcLexer.l"
{ return LLC_OPEN_REFERENCE;	}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 130 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_REFERENCE;	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 132 "tools/compile/llcLexer.l"
{ return LLC_RETURN;			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 133 "tools/compile/llcLexer.l"
{ return LLC_SUSPEND;			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 135 "tools/compile/llcLexer.l"
{ return LLC_ROUTINE;			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 136 "tools/compile/llcLexer.l"
{ return LLC_PROCESS;			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 138 "tools/compile/llcLexer.l"
{ return LLC_EXCLUDE;			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "tools/compile/llcLexer.l"
{ return LLC_OVERLOAD;			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 141 "tools/compile/llcLexer.l"
{ return LLC_OVERLOAD;			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 143 "tools/compile/llcLexer.l"
{ return LLC_RESULT;			}
	YY_BREAK
/***************************************************************************
	Math - Shift
  ***************************************************************************/
case 47:
YY_RULE_SETUP
#line 149 "tools/compile/llcLexer.l"
{ return LLC_LEFT_SHIFT;			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 150 "tools/compile/llcLexer.l"
{ return LLC_RIGHT_SHIFT;			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 151 "tools/compile/llcLexer.l"
{ return LLC_LEFT_SHIFT_EQUALS;		}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 152 "tools/compile/llcLexer.l"
{ return LLC_RIGHT_SHIFT_EQUALS;	}
	YY_BREAK
/***************************************************************************
	Math - Arith
  ***************************************************************************/
case 51:
YY_RULE_SETUP
#line 158 "tools/compile/llcLexer.l"
{ return LLC_MUL;				}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "tools/compile/llcLexer.l"
{ return LLC_DIV;				}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "tools/compile/llcLexer.l"
{ return LLC_ADD;				}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "tools/compile/llcLexer.l"
{ return LLC_SUB;				}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "tools/compile/llcLexer.l"
{ return LLC_MOD;				}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "tools/compile/llcLexer.l"
{ return LLC_MOD;				}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "tools/compile/llcLexer.l"
{ return LLC_EXCLUSIVE_ADD;		}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 166 "tools/compile/llcLexer.l"
{ return LLC_MUL_EQ;			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 167 "tools/compile/llcLexer.l"
{ return LLC_DIV_EQ;			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 168 "tools/compile/llcLexer.l"
{ return LLC_ADD_EQ;			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 169 "tools/compile/llcLexer.l"
{ return LLC_SUB_EQ;			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 170 "tools/compile/llcLexer.l"
{ return LLC_EXCLUSIVE_ADD_EQ;	}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 171 "tools/compile/llcLexer.l"
{ return LLC_INC;				}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 172 "tools/compile/llcLexer.l"
{ return LLC_DEC;				}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 174 "tools/compile/llcLexer.l"
{ return LLC_EQUALS;			}
	YY_BREAK
/***************************************************************************
	Math - Compare
  ***************************************************************************/
case 66:
YY_RULE_SETUP
#line 180 "tools/compile/llcLexer.l"
{ return LLC_AND;			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 181 "tools/compile/llcLexer.l"
{ return LLC_AND;			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 182 "tools/compile/llcLexer.l"
{ return LLC_OR;			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 183 "tools/compile/llcLexer.l"
{ return LLC_OR;			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 184 "tools/compile/llcLexer.l"
{ return LLC_NOT;			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 185 "tools/compile/llcLexer.l"
{ return LLC_NOT;			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 187 "tools/compile/llcLexer.l"
{ return LLC_LT;			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 188 "tools/compile/llcLexer.l"
{ return LLC_LE;			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 189 "tools/compile/llcLexer.l"
{ return LLC_GT;			}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 190 "tools/compile/llcLexer.l"
{ return LLC_GE;			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 191 "tools/compile/llcLexer.l"
{ return LLC_NE;			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 192 "tools/compile/llcLexer.l"
{ return LLC_NE;			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 194 "tools/compile/llcLexer.l"
{ return LLC_BIT_AND;		}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 195 "tools/compile/llcLexer.l"
{ return LLC_BIT_OR;		}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 196 "tools/compile/llcLexer.l"
{ return LLC_BIT_NOT;		}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 197 "tools/compile/llcLexer.l"
{ return LLC_BIT_AND_EQ;	}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 198 "tools/compile/llcLexer.l"
{ return LLC_BIT_OR_EQ;		}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 200 "tools/compile/llcLexer.l"
{ return LLC_TRUE;			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 201 "tools/compile/llcLexer.l"
{ return LLC_FALSE;			}
	YY_BREAK
/***************************************************************************
	List
  ***************************************************************************/
case 85:
YY_RULE_SETUP
#line 207 "tools/compile/llcLexer.l"
{ return LLC_LIST_OPEN;		}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 208 "tools/compile/llcLexer.l"
{ return LLC_LIST_CLOSE;	}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 210 "tools/compile/llcLexer.l"
{ return LLC_OPEN_INDEX;	}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 211 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_INDEX;	}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 213 "tools/compile/llcLexer.l"
{ return LLC_IN;			}
	YY_BREAK
/***************************************************************************
	Conditionals
  ***************************************************************************/
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 219 "tools/compile/llcLexer.l"
{ return LLC_HASHIF;	}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 220 "tools/compile/llcLexer.l"
{ return LLC_IF;		}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 221 "tools/compile/llcLexer.l"
{ return LLC_ELSE;		}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 222 "tools/compile/llcLexer.l"
{ return LLC_WHILE;		}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 223 "tools/compile/llcLexer.l"
{ return LLC_FOREACH;	}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 224 "tools/compile/llcLexer.l"
{ return LLC_RECURSIVE;	}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 225 "tools/compile/llcLexer.l"
{ return LLC_CASE;		}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 226 "tools/compile/llcLexer.l"
{ return LLC_DEFAULT;	}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 227 "tools/compile/llcLexer.l"
{ return LLC_BREAK;		}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 228 "tools/compile/llcLexer.l"
{ return LLC_CONTINUE;	}
	YY_BREAK
/***************************************************************************
	Overloadable Function
  ***************************************************************************/
/* Only a couple defined atm, will work out the rest later once things start
	get put together... */
case 100:
YY_RULE_SETUP
#line 237 "tools/compile/llcLexer.l"
{ return LLC_OF_LOOK;	}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 238 "tools/compile/llcLexer.l"
{ return LLC_OF_USE;	}
	YY_BREAK
/***************************************************************************
	Misc
  ***************************************************************************/
case 102:
YY_RULE_SETUP
#line 244 "tools/compile/llcLexer.l"
{ return LLC_CLASS;			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 245 "tools/compile/llcLexer.l"
{ return LLC_INHERITS;		}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 246 "tools/compile/llcLexer.l"
{ return LLC_IS_A;			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 247 "tools/compile/llcLexer.l"
{ return LLC_ARE;			}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 248 "tools/compile/llcLexer.l"
{ return LLC_ADDRESS_OF;	}
	YY_BREAK
/***************************************************************************
	Identifiers
  ***************************************************************************/
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 254 "tools/compile/llcLexer.l"
{ return LLC_FUNC_IDENT;	}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 256 "tools/compile/llcLexer.l"
{ return LLC_IDENT;			}
	YY_BREAK
/***************************************************************************
 	Debugging/Regression Testing
  ***************************************************************************/
case 109:
YY_RULE_SETUP
#line 262 "tools/compile/llcLexer.l"
{ BEGIN(HASH_EXPECT);		}
	YY_BREAK

case 110:
YY_RULE_SETUP
#line 265 "tools/compile/llcLexer.l"
{ return LLC_XWARN;			}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 266 "tools/compile/llcLexer.l"
{ return LLC_XFAIL;			}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 267 "tools/compile/llcLexer.l"
{ return LLC_XPASS;			}
	YY_BREAK
case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 268 "tools/compile/llcLexer.l"
{ 							}
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 269 "tools/compile/llcLexer.l"
{ BEGIN(INITIAL);			}
	YY_BREAK
/* ignore everything else, since this really isn't a 'user' function lacking
 	random warnings isn't a problem */
case 115:
YY_RULE_SETUP
#line 272 "tools/compile/llcLexer.l"
{ }
	YY_BREAK

/***************************************************************************
	Catch All
  ***************************************************************************/
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CCOMMENT):
case YY_STATE_EOF(HASH_EXPECT):
#line 279 "tools/compile/llcLexer.l"
{ return LLC_EOF;	}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 281 "tools/compile/llcLexer.l"
{ return LLC_ERROR;	}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 283 "tools/compile/llcLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1955 "tools/compile/llcLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = static_cast<int>(yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	llcfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = static_cast<int>((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = static_cast<int>(yy_def[yy_current_state]);
			if ( yy_current_state >= 333 )
				yy_c = yy_meta[static_cast<unsigned int>(yy_c)];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + static_cast<unsigned int>(yy_c)];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = static_cast<int>(yy_def[yy_current_state]);
		if ( yy_current_state >= 333 )
			yy_c = yy_meta[static_cast<unsigned int>(yy_c)];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + static_cast<unsigned int>(yy_c)];
	yy_is_jam = (yy_current_state == 332);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += static_cast<int>(dest - source);
		yy_bp += static_cast<int>(dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) llcalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) llcalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		llcfree((void *) b->yy_ch_buf  );

	llcfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)llcalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)llcrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) llcalloc(new_size  );

		else
			(yy_start_stack) = (int *) llcrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *llcalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *llcrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void llcfree (void * ptr )
{
	free( (char *) ptr );	/* see llcrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 283 "tools/compile/llcLexer.l"





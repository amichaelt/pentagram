#define yyFlexLexer llcFlexLexer
#include "pent_include.h"

#line 4 "tools/compile/llcLexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /data/pentagram/cvs2svn/pentagram/pentagram/tools/compile/llcLexer.cpp,v 1.3 2003/05/29 14:11:16 darkepaw Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) (static_cast<unsigned int>(static_cast<unsigned char>(c)))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#define FLEX_DEBUG

#include "llcLexer.h"


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = static_cast<int>(yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
static yyconst short int yy_acclist[449] =
    {   0,
      111,  109,  110,   13,  109,  110,   13,  110,   70,  109,
      110,  109,  110,  109,  110,   78,  109,  110,  109,  110,
       30,  109,  110,   31,  109,  110,   51,  109,  110,   53,
      109,  110,   33,  109,  110,   54,  109,  110,   32,  109,
      110,   52,  109,  110,    9,  109,  110,    9,  109,  110,
       35,  109,  110,   34,  109,  110,   72,  109,  110,   65,
      109,  110,   74,  109,  110,  108,  109,  110,  108,  109,
      110,  108,  109,  110,  108,  109,  110,  108,  109,  110,
      108,  109,  110,  108,  109,  110,  108,  109,  110,  108,
      109,  110,  108,  109,  110,  108,  109,  110,   87,  109,

      110,   88,  109,  110,   57,  109,  110,  108,  109,  110,
      108,  109,  110,  108,  109,  110,  108,  109,  110,  108,
      109,  110,  108,  109,  110,  108,  109,  110,  108,  109,
      110,  108,  109,  110,  108,  109,  110,  108,  109,  110,
      108,  109,  110,  108,  109,  110,  108,  109,  110,  108,
      109,  110,  108,  109,  110,  108,  109,  110,   28,  109,
      110,   79,  109,  110,   29,  109,  110,   80,  109,  110,
        3,  110,    4,  110,    5,  110,   13,   77,   11,   66,
       81,   12,   58,   63,   60,   64,    9,   61,    2,   59,
       36,   85,   73,   76,   75,   86,  107,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,   37,
       38,   62,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   89,  108,  108,  108,  108,
      108,   69,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   82,   68,    3,    6,    1,    8,   10,   47,   48,
      108,  108,  108,  108,   19,  108,  108,  108,  108,  108,
      108,  108,  108,   67,  108,  105,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108, 8283,16475,  108,  108,
       55,  108,   71,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  101,  108,  108,    7, 8282,16474,   49,   50,

       14,  108,   16,  108,  108,  108,  108,   23,  108,  108,
      108,  108,  108,   17,  108,  108,  108,   96,  108,  108,
      108,  108,   92,  108,  108,  108,  108, 8283,  107,  108,
      104,  100,  108,  108,  108,  108,  108,  108,  108,  108,
      108,   83,  108,  108, 8282,  108,   25,  108,   18,  108,
      108,  108,  108,  108,  108,  108,   98,  108,  102,  108,
      108,  108,  108,   84,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,   21,
      108,  108,   27,  108,   22,  108,  108,  108,  108,  108,
      108,  108,   56,  108,  108,  108,  108,   46,  108,   39,

      108,  108,  108, 8285,16477,   15,  108,  108,   20,  108,
       24,  108,  108,  108,   97,  108,   43,  108,   94,  108,
      108,  108,   42,  108,  108,   41,  108,   40,  108, 8285,
      107,   26,  108,   99,  108,  103,  108,   45,  108,  108,
      108,   95,  108,  106,  108,  108,   44,  108
    } ;

static yyconst short int yy_accept[307] =
    {   0,
        1,    1,    1,    1,    1,    2,    4,    7,    9,   12,
       14,   16,   19,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  144,  147,  150,  153,  156,  159,
      162,  165,  168,  171,  173,  175,  177,  178,  179,  179,
      180,  180,  181,  182,  182,  183,  184,  185,  186,  187,
      188,  189,  190,  190,  191,  191,  191,  192,  193,  194,
      195,  196,  197,  197,  198,  199,  200,  201,  202,  203,

      204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  226,  228,  229,  230,  231,  232,  234,  235,
      236,  237,  238,  239,  240,  241,  242,  243,  244,  245,
      246,  246,  246,  247,  248,  249,  250,  251,  252,  253,
      254,  255,  257,  258,  259,  260,  261,  262,  263,  264,
      266,  268,  269,  270,  271,  272,  273,  274,  275,  276,
      277,  279,  280,  280,  281,  283,  285,  286,  287,  288,
      289,  290,  291,  292,  293,  295,  296,  296,  297,  299,
      300,  301,  303,  305,  306,  307,  308,  310,  311,  312,

      313,  314,  316,  317,  318,  320,  321,  322,  323,  325,
      326,  327,  328,  330,  331,  332,  334,  335,  336,  337,
      338,  339,  340,  341,  342,  344,  345,  346,  347,  349,
      351,  352,  353,  354,  355,  356,  357,  359,  361,  362,
      363,  364,  366,  367,  368,  369,  370,  371,  372,  373,
      374,  375,  376,  377,  378,  379,  380,  382,  383,  385,
      387,  388,  389,  390,  391,  392,  393,  395,  396,  397,
      398,  400,  402,  403,  404,  406,  408,  409,  411,  413,
      414,  415,  417,  419,  421,  422,  423,  425,  426,  428,
      430,  432,  434,  434,  436,  438,  440,  441,  441,  442,

      444,  445,  446,  447,  449,  449
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   25,   25,
       29,   29,   30,   29,   29,   31,   29,   32,   29,   33,
       29,   34,   35,   29,   29,   29,   36,   37,   29,   29,
       38,    1,   39,   40,   29,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   29,   50,   51,   52,   53,
       54,   55,   29,   56,   57,   58,   59,   60,   61,   62,
       63,   29,   64,   65,   66,   67,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[68] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    2,    1,
        4,    1,    1,    1,    1,    1,    5,    5,    5,    1,
        1,    1,    1,    1,    5,    5,    5,    5,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[314] =
    {   0,
        0,    0,   65,   66,  229, 1240,   68,   70,  205,  221,
      164,   67,  197, 1240, 1240,  179,   63, 1240,   64, 1240,
       68,   75,   78,  180, 1240,   76, 1240,   65,  100,  102,
      104,  112,  116,  121,  124,  126,  129,  137,  140,  160,
      151,  158,  148,  150,  158,  169,  173,  182,  184,  194,
      208,  213,  216,  218,  230,  240,  242,  244,  252, 1240,
       57, 1240, 1240,    0, 1240,  163,  142, 1240,  172, 1240,
      127, 1240, 1240,  160, 1240, 1240, 1240, 1240, 1240,  145,
     1240, 1240,  163, 1240,  137,    0, 1240,  125, 1240, 1240,
     1240,  117,  254, 1240,  256,  268,  276,  278,  286,  288,

      300,  302,  304,  314,  312,  316, 1240, 1240, 1240,  326,
      330,  334,  339,  342,  347,  356,  358,  360,  373,  378,
      383,  387,  392,  403,  405,  416,  418,  421,  429,  432,
      434,  442,  445,  447,  455,  459, 1240, 1240,    0,  133,
      186,  131, 1240,  190,    0,   97,   93,  463,  476,  478,
      480,  494,  496,  507,  509,  517,  520,  522,  525,  535,
      538,  543,  548,  556,  558,  561,  569,  571,  573,  583,
      585,  587,  595,  597,  606,  608,  616,  618,  631,  635,
      639,  643,  647,  651,  655,  660,  107, 1240,  664, 1240,
     1240,  668,  672,  676,  680,  684,  697,  701,  705,  713,

      716,  718,  726,  730,  734,  738,  742,  746,  750,  758,
      763,  772, 1240,  774, 1240,  776,  784,  787,  795,  797,
      800,  809,  812,  817,  820,  822, 1240,  825,  830,  834,
      839,  843,  847,  855,  866,  870,  874,  878,  886,  891,
      888,  899,  901,  903,  912,  914,  917,  922,  926,  934,
      938,  946,  948,  951,  956,  960,  968,  973,  983,  986,
      991,  994,  999, 1004, 1008, 1012, 1016, 1021, 1024, 1029,
     1032, 1034, 1037, 1042, 1052, 1056, 1064, 1066, 1074, 1082,
     1085, 1087, 1090, 1095, 1098, 1100, 1103, 1108, 1111, 1116,
     1240, 1124, 1126, 1129, 1134, 1137, 1139,   62, 1147, 1149,

     1240, 1151, 1160, 1162, 1240, 1205, 1210, 1215, 1219, 1224,
     1229,   80, 1234
    } ;

static yyconst short int yy_def[314] =
    {   0,
      305,    1,  306,  306,  305,  305,  305,  305,  305,  307,
      305,  305,  308,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  305,
      305,  305,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  305,
      305,  305,  305,  310,  305,  305,  305,  305,  307,  305,
      305,  305,  305,  308,  305,  305,  305,  305,  305,  305,
      305,  305,  311,  305,  305,  312,  305,  305,  305,  305,
      305,  305,  305,  305,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  305,  305,  305,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  305,  305,  310,  313,
      305,  311,  305,  305,  312,  305,  305,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      305,  309,  305,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  313,  305,  305,  305,
      305,  309,  309,  309,  309,  309,  309,  309,  309,  309,

      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  305,  309,  305,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  305,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  305,  309,  309,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  309,  309,  309,  309,
      305,  309,  305,  309,  309,  309,  309,  305,  309,  309,

      305,  309,  309,  309,    0,  305,  305,  305,  305,  305,
      305,  305,  305
    } ;

static yyconst short int yy_nxt[1308] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   29,   33,
       34,   35,   36,   37,   38,   39,   29,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   29,   29,   49,   29,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   29,
       59,   29,   29,   60,   61,   62,   63,   65,   65,   67,
       67,   67,   67,   72,   77,   66,   66,   79,   82,  137,
       80,   80,   80,   83,  145,   78,   81,   91,   92,   73,
       84,   80,   80,   80,   80,   80,   80,   88,   89,   90,

       85,   93,   93,   93,   93,   93,   93,  301,   94,  188,
       94,   86,   94,   93,   93,  191,   85,   93,   93,  190,
       94,  138,   93,   93,   94,   93,   93,   93,   93,   94,
       93,   93,   94,  143,   94,  188,   86,   94,   93,   93,
      147,   93,   93,   67,   67,   94,  146,   99,   94,   93,
       93,   93,   93,  144,  144,   96,   94,   98,   94,   93,
       93,   80,   80,   80,   97,  143,   94,   75,  100,  101,
       93,   93,  141,  104,   93,   93,   70,   94,  140,  103,
      109,   94,  102,   93,   93,   93,   93,  189,  189,  108,
       94,  110,   94,  106,  105,   93,   93,  107,  114,   87,

      111,   76,   94,  112,   75,  113,  144,  144,  115,   93,
       93,  116,   71,  117,   93,   93,   94,   93,   93,   93,
       93,   94,  120,  118,   94,   70,   94,   68,  305,  122,
      305,   93,   93,  305,  119,  121,  123,  305,   94,  305,
      124,   93,   93,   93,   93,   93,   93,  125,   94,  305,
       94,  305,   94,   93,   93,   93,   93,   93,   93,  305,
       94,  126,   94,  305,   94,  305,  127,  305,  305,   93,
       93,  128,  305,  130,  131,  129,   94,   93,   93,   93,
       93,  305,  305,  132,   94,  305,   94,   93,   93,   93,
       93,  305,  305,  305,   94,  305,   94,  134,  133,  136,

      135,   93,   93,   93,   93,   93,   93,  305,   94,  305,
       94,  305,   94,   93,   93,   93,   93,   93,   93,  305,
       94,  148,   94,  305,   94,  305,  305,   93,   93,  305,
      150,   93,   93,  149,   94,   93,   93,  305,   94,  151,
       93,   93,   94,   93,   93,  152,  305,   94,   93,   93,
       94,  305,  155,  154,  156,   94,  153,   93,   93,   93,
       93,   93,   93,  305,   94,  305,   94,  157,   94,  159,
      305,  158,  305,  160,   93,   93,  305,  305,  161,   93,
       93,   94,  305,  162,   93,   93,   94,  164,  171,  171,
      305,   94,  305,   93,   93,   94,  305,  305,  163,  305,

       94,  305,  305,  166,  173,  173,   93,   93,  165,  305,
      305,   94,  305,   94,  305,  168,  167,   93,   93,   93,
       93,  305,   93,   93,   94,  305,   94,  305,  169,   94,
       93,   93,  305,   93,   93,   93,   93,   94,  170,  172,
       94,  305,   94,   93,   93,  305,   93,   93,   93,   93,
       94,  305,  305,   94,  305,   94,   93,   93,  174,  175,
       93,   93,  305,   94,   93,   93,  305,   94,  305,  305,
      305,   94,  305,  177,  305,  176,  179,   93,   93,   93,
       93,   93,   93,  305,   94,  178,   94,  305,   94,  305,
      180,  181,  305,  305,  305,   93,   93,   93,   93,  185,

      182,  183,   94,  305,   94,  184,  305,  186,   93,   93,
       93,   93,  305,  192,  305,   94,  305,   94,   93,   93,
      193,   93,   93,   93,   93,   94,   93,   93,   94,  305,
       94,  305,  305,   94,  194,  195,   93,   93,  196,   93,
       93,  305,  305,   94,   93,   93,   94,  305,  198,   93,
       93,   94,  305,  197,  305,  305,   94,   93,   93,   93,
       93,  199,   93,   93,   94,  202,   94,  200,  201,   94,
       93,   93,   93,   93,   93,   93,  305,   94,  305,   94,
      203,   94,  305,  204,   93,   93,  171,  171,   93,   93,
      305,   94,  205,  213,  305,   94,  173,  173,   93,   93,

      305,  208,  305,   94,  305,   94,  305,   93,   93,   93,
       93,  305,  206,  209,   94,  207,   94,   93,   93,   93,
       93,  210,  305,  305,   94,  305,   94,  212,  305,  211,
      305,  214,   93,   93,  305,  215,   93,   93,  305,   94,
       93,   93,  305,   94,   93,   93,  216,   94,   93,   93,
      305,   94,   93,   93,  305,   94,   93,   93,  305,   94,
      219,   93,   93,   94,  217,  189,  189,  305,   94,   93,
       93,  218,  227,   93,   93,  305,   94,   93,   93,  305,
       94,   93,   93,  305,   94,   93,   93,  305,   94,  220,
      305,  305,   94,  221,  305,  225,  305,  222,   93,   93,

      223,  224,   93,   93,  305,   94,   93,   93,  305,   94,
      226,  305,  228,   94,   93,   93,  305,   93,   93,   93,
       93,   94,  305,  230,   94,  305,   94,   93,   93,  305,
      231,   93,   93,  229,   94,   93,   93,  305,   94,   93,
       93,  305,   94,   93,   93,  232,   94,   93,   93,  305,
       94,   93,   93,  305,   94,  305,  305,  305,   94,   93,
       93,  305,  233,  234,   93,   93,   94,  305,  235,  305,
      236,   94,  305,   93,   93,   93,   93,   93,   93,  237,
       94,  305,   94,  305,   94,   93,   93,  305,   93,   93,
      239,  305,   94,  305,  238,   94,   93,   93,   93,   93,

      305,   93,   93,   94,  240,   94,  305,  242,   94,  305,
       93,   93,  243,   93,   93,  305,  241,   94,   93,   93,
       94,   93,   93,   93,   93,   94,   93,   93,   94,  244,
       94,   93,   93,   94,  245,   93,   93,  246,   94,  247,
       93,   93,   94,  305,   93,   93,  305,   94,   93,   93,
      249,   94,  248,  305,  305,   94,   93,   93,  305,  305,
      251,  252,  305,   94,  250,  254,  253,   93,   93,  305,
      255,   93,   93,  305,   94,   93,   93,  305,   94,   93,
       93,  305,   94,  256,  305,  305,   94,   93,   93,   93,
       93,  258,   93,   93,   94,  305,   94,  305,  257,   94,

       93,   93,   93,   93,   93,   93,  305,   94,  305,   94,
      305,   94,  260,   93,   93,   93,   93,  259,   93,   93,
       94,  305,   94,   93,   93,   94,  261,   93,   93,  305,
       94,  264,  305,  305,   94,   93,   93,  305,  262,   93,
       93,  263,   94,  265,  305,  305,   94,   93,   93,  275,
      275,  266,   93,   93,   94,  305,   94,   93,   93,   94,
      305,   93,   93,  305,   94,  267,  305,  268,   94,   93,
       93,  305,  305,  269,   93,   93,   94,  305,  270,  305,
      305,   94,  305,  271,   93,   93,  272,   93,   93,  305,
      273,   94,   93,   93,   94,   93,   93,  305,  274,   94,

       93,   93,   94,  276,  305,   93,   93,   94,  277,   93,
       93,  305,   94,   93,   93,  278,   94,   93,   93,  305,
       94,  305,   93,   93,   94,   93,   93,  305,  279,   94,
       93,   93,   94,   93,   93,   93,   93,   94,   93,   93,
       94,  305,   94,   93,   93,   94,  305,  280,  283,  305,
       94,  305,  281,  275,  275,  284,  282,   93,   93,  305,
      291,  286,  305,  305,   94,   93,   93,   93,   93,  285,
      305,  305,   94,  305,   94,   93,   93,  288,  305,  305,
      287,  289,   94,  293,  293,  290,   93,   93,   93,   93,
       94,   93,   93,   94,  305,   94,   93,   93,   94,   93,

       93,   93,   93,   94,   93,   93,   94,  305,   94,   93,
       93,   94,   93,   93,  305,  305,   94,   93,   93,   94,
      305,  292,  305,  305,   94,   93,   93,  293,  293,  294,
       93,   93,   94,  305,   94,   93,   93,   94,   93,   93,
       93,   93,   94,  296,  305,   94,  305,   94,   93,   93,
       93,   93,   93,   93,  295,   94,  305,   94,  305,   94,
      305,   93,   93,   93,   93,  305,  305,  297,   94,  305,
       94,  305,  305,  305,  305,  305,  305,  299,  305,  298,
      305,  305,  305,  300,  305,  305,  305,  305,  302,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,

      305,  303,  305,  305,  304,   64,   64,   64,   64,   64,
       69,   69,   69,   69,   69,   74,   74,   74,   74,   74,
       95,   95,  305,   95,  139,  139,  305,  305,  139,  142,
      142,  142,  142,  142,  187,  187,  187,  187,  187,    5,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,

      305,  305,  305,  305,  305,  305,  305
    } ;

static yyconst short int yy_chk[1308] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    4,    7,
        7,    8,    8,   12,   17,    3,    4,   19,   21,   61,
       19,   19,   19,   21,  312,   17,   19,   28,   28,   12,
       21,   22,   22,   22,   23,   23,   23,   26,   26,   26,

       22,   29,   29,   30,   30,   31,   31,  298,   29,  187,
       30,   22,   31,   32,   32,  147,   22,   33,   33,  146,
       32,   61,   34,   34,   33,   35,   35,   36,   36,   34,
       37,   37,   35,  142,   36,  140,   22,   37,   38,   38,
       92,   39,   39,   67,   67,   38,   88,   32,   39,   43,
       43,   44,   44,   85,   85,   30,   43,   31,   44,   45,
       45,   80,   80,   80,   30,   83,   45,   74,   33,   34,
       46,   46,   71,   37,   47,   47,   69,   46,   66,   36,
       42,   47,   35,   48,   48,   49,   49,  141,  141,   41,
       48,   43,   49,   39,   38,   50,   50,   40,   45,   24,

       43,   16,   50,   43,   13,   44,  144,  144,   45,   51,
       51,   45,   11,   46,   52,   52,   51,   53,   53,   54,
       54,   52,   48,   47,   53,   10,   54,    9,    5,   49,
        0,   55,   55,    0,   47,   48,   49,    0,   55,    0,
       49,   56,   56,   57,   57,   58,   58,   50,   56,    0,
       57,    0,   58,   59,   59,   93,   93,   95,   95,    0,
       59,   51,   93,    0,   95,    0,   52,    0,    0,   96,
       96,   53,    0,   54,   55,   53,   96,   97,   97,   98,
       98,    0,    0,   55,   97,    0,   98,   99,   99,  100,
      100,    0,    0,    0,   99,    0,  100,   57,   56,   59,

       58,  101,  101,  102,  102,  103,  103,    0,  101,    0,
      102,    0,  103,  105,  105,  104,  104,  106,  106,    0,
      105,   96,  104,    0,  106,    0,    0,  110,  110,    0,
       98,  111,  111,   97,  110,  112,  112,    0,  111,   99,
      113,  113,  112,  114,  114,  100,    0,  113,  115,  115,
      114,    0,  103,  102,  104,  115,  101,  116,  116,  117,
      117,  118,  118,    0,  116,    0,  117,  105,  118,  110,
        0,  106,    0,  111,  119,  119,    0,    0,  112,  120,
      120,  119,    0,  113,  121,  121,  120,  115,  122,  122,
        0,  121,    0,  123,  123,  122,    0,    0,  114,    0,

      123,    0,    0,  117,  124,  124,  125,  125,  116,    0,
        0,  124,    0,  125,    0,  119,  118,  126,  126,  127,
      127,    0,  128,  128,  126,    0,  127,    0,  120,  128,
      129,  129,    0,  130,  130,  131,  131,  129,  121,  123,
      130,    0,  131,  132,  132,    0,  133,  133,  134,  134,
      132,    0,    0,  133,    0,  134,  135,  135,  125,  126,
      136,  136,    0,  135,  148,  148,    0,  136,    0,    0,
        0,  148,    0,  129,    0,  127,  131,  149,  149,  150,
      150,  151,  151,    0,  149,  130,  150,    0,  151,    0,
      131,  131,    0,    0,    0,  152,  152,  153,  153,  135,

      132,  133,  152,    0,  153,  134,    0,  136,  154,  154,
      155,  155,    0,  148,    0,  154,    0,  155,  156,  156,
      149,  157,  157,  158,  158,  156,  159,  159,  157,    0,
      158,    0,    0,  159,  150,  151,  160,  160,  152,  161,
      161,    0,    0,  160,  162,  162,  161,    0,  154,  163,
      163,  162,    0,  153,    0,    0,  163,  164,  164,  165,
      165,  155,  166,  166,  164,  158,  165,  156,  157,  166,
      167,  167,  168,  168,  169,  169,    0,  167,    0,  168,
      159,  169,    0,  162,  170,  170,  171,  171,  172,  172,
        0,  170,  163,  171,    0,  172,  173,  173,  174,  174,

        0,  166,    0,  173,    0,  174,    0,  175,  175,  176,
      176,    0,  164,  167,  175,  165,  176,  177,  177,  178,
      178,  168,    0,    0,  177,    0,  178,  170,    0,  169,
        0,  172,  179,  179,    0,  173,  180,  180,    0,  179,
      181,  181,    0,  180,  182,  182,  174,  181,  183,  183,
        0,  182,  184,  184,    0,  183,  185,  185,    0,  184,
      178,  186,  186,  185,  175,  189,  189,    0,  186,  192,
      192,  177,  189,  193,  193,    0,  192,  194,  194,    0,
      193,  195,  195,    0,  194,  196,  196,    0,  195,  179,
        0,    0,  196,  180,    0,  184,    0,  181,  197,  197,

      182,  183,  198,  198,    0,  197,  199,  199,    0,  198,
      186,    0,  192,  199,  200,  200,    0,  201,  201,  202,
      202,  200,    0,  195,  201,    0,  202,  203,  203,    0,
      196,  204,  204,  194,  203,  205,  205,    0,  204,  206,
      206,    0,  205,  207,  207,  198,  206,  208,  208,    0,
      207,  209,  209,    0,  208,    0,    0,    0,  209,  210,
      210,    0,  199,  200,  211,  211,  210,    0,  201,    0,
      203,  211,    0,  212,  212,  214,  214,  216,  216,  204,
      212,    0,  214,    0,  216,  217,  217,    0,  218,  218,
      207,    0,  217,    0,  206,  218,  219,  219,  220,  220,

        0,  221,  221,  219,  208,  220,    0,  211,  221,    0,
      222,  222,  212,  223,  223,    0,  210,  222,  224,  224,
      223,  225,  225,  226,  226,  224,  228,  228,  225,  214,
      226,  229,  229,  228,  217,  230,  230,  218,  229,  219,
      231,  231,  230,    0,  232,  232,    0,  231,  233,  233,
      221,  232,  220,    0,    0,  233,  234,  234,    0,    0,
      223,  224,    0,  234,  222,  228,  226,  235,  235,    0,
      229,  236,  236,    0,  235,  237,  237,    0,  236,  238,
      238,    0,  237,  231,    0,    0,  238,  239,  239,  241,
      241,  233,  240,  240,  239,    0,  241,    0,  232,  240,

      242,  242,  243,  243,  244,  244,    0,  242,    0,  243,
        0,  244,  235,  245,  245,  246,  246,  234,  247,  247,
      245,    0,  246,  248,  248,  247,  236,  249,  249,    0,
      248,  241,    0,    0,  249,  250,  250,    0,  239,  251,
      251,  240,  250,  243,    0,    0,  251,  252,  252,  253,
      253,  244,  254,  254,  252,    0,  253,  255,  255,  254,
        0,  256,  256,    0,  255,  245,    0,  246,  256,  257,
      257,    0,    0,  247,  258,  258,  257,    0,  248,    0,
        0,  258,    0,  249,  259,  259,  250,  260,  260,    0,
      251,  259,  261,  261,  260,  262,  262,    0,  252,  261,

      263,  263,  262,  254,    0,  264,  264,  263,  255,  265,
      265,    0,  264,  266,  266,  256,  265,  267,  267,    0,
      266,    0,  268,  268,  267,  269,  269,    0,  258,  268,
      270,  270,  269,  271,  271,  272,  272,  270,  273,  273,
      271,    0,  272,  274,  274,  273,    0,  261,  264,    0,
      274,    0,  262,  275,  275,  265,  263,  276,  276,    0,
      275,  268,    0,    0,  276,  277,  277,  278,  278,  266,
        0,    0,  277,    0,  278,  279,  279,  270,    0,    0,
      269,  273,  279,  280,  280,  274,  281,  281,  282,  282,
      280,  283,  283,  281,    0,  282,  284,  284,  283,  285,

      285,  286,  286,  284,  287,  287,  285,    0,  286,  288,
      288,  287,  289,  289,    0,    0,  288,  290,  290,  289,
        0,  277,    0,    0,  290,  292,  292,  293,  293,  281,
      294,  294,  292,    0,  293,  295,  295,  294,  296,  296,
      297,  297,  295,  286,    0,  296,    0,  297,  299,  299,
      300,  300,  302,  302,  285,  299,    0,  300,    0,  302,
        0,  303,  303,  304,  304,    0,    0,  288,  303,    0,
      304,    0,    0,    0,    0,    0,    0,  296,    0,  293,
        0,    0,    0,  297,    0,    0,    0,    0,  299,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  302,    0,    0,  303,  306,  306,  306,  306,  306,
      307,  307,  307,  307,  307,  308,  308,  308,  308,  308,
      309,  309,    0,  309,  310,  310,    0,    0,  310,  311,
      311,  311,  311,  311,  313,  313,  313,  313,  313,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,

      305,  305,  305,  305,  305,  305,  305
    } ;

static yyconst short int yy_rule_linenum[110] =
    {   0,
       43,   45,   46,   47,   48,   49,   50,   56,   58,   60,
       62,   64,   70,   76,   77,   79,   81,   82,   87,   88,
       89,   91,   95,   96,  100,  101,  102,  108,  109,  110,
      111,  112,  113,  114,  115,  116,  117,  118,  120,  121,
      123,  124,  126,  128,  129,  131,  137,  138,  139,  140,
      146,  147,  148,  149,  150,  151,  152,  154,  155,  156,
      157,  158,  159,  160,  162,  168,  169,  170,  171,  172,
      173,  175,  176,  177,  178,  179,  180,  182,  183,  184,
      185,  186,  188,  189,  195,  196,  198,  199,  201,  207,
      208,  209,  210,  211,  212,  213,  214,  215,  216,  225,

      226,  232,  233,  234,  235,  236,  242,  244,  252
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "tools/compile/llcLexer.l"
#define INITIAL 0
#line 2 "tools/compile/llcLexer.l"
#include "pent_include.h"
//#include <cctype>
#include "llcTokens.h"

// just to 'simply' things
#define YY_NEVER_INTERACTIVE 1
// to make things easier I hope. *grin*
// only for debugging
#define CCOMMENT 1

// needs to handle 'escape quoting' of '\\\"' in the string
#line 816 "tools/compile/llcLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 37 "tools/compile/llcLexer.l"


 /***************************************************************************
	Comment handling
  ***************************************************************************/

#line 950 "tools/compile/llcLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = static_cast<int>(yy_def[yy_current_state]);
				if ( yy_current_state >= 306 )
					yy_c = yy_meta[static_cast<unsigned int>(yy_c)];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + static_cast<unsigned int>(yy_c)];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1240 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				cerr << "--scanner backing up\n";
			else if ( yy_act < 110 )
				cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 110 )
				cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 111 )
				cerr << "--(end of buffer or a NUL)\n";
			else
				cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 43 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 45 "tools/compile/llcLexer.l"
{ BEGIN(CCOMMENT);		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 46 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 47 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 48 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 49 "tools/compile/llcLexer.l"
{ BEGIN(INITIAL);		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 50 "tools/compile/llcLexer.l"
{ BEGIN(INITIAL);		}
	YY_BREAK
/***************************************************************************
	Constants
  ***************************************************************************/
case 8:
YY_RULE_SETUP
#line 56 "tools/compile/llcLexer.l"
{ return LLC_INTEGER;	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 58 "tools/compile/llcLexer.l"
{ return LLC_INTEGER;	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 60 "tools/compile/llcLexer.l"
{ return LLC_INTEGER;	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 62 "tools/compile/llcLexer.l"
{ return LLC_STRING;	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 64 "tools/compile/llcLexer.l"
{ return LLC_CSTRING;	}
	YY_BREAK
/***************************************************************************
	Whitespace
  ***************************************************************************/
case 13:
YY_RULE_SETUP
#line 70 "tools/compile/llcLexer.l"
{ }
	YY_BREAK
/***************************************************************************
	Variable types
  ***************************************************************************/
case 14:
YY_RULE_SETUP
#line 76 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 79 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "tools/compile/llcLexer.l"
{ return LLC_DWORD;		}
	YY_BREAK
/* Unsure if the default 'number' should be WORD or DWORD, shall find out soon enough
    we shall... */
case 19:
YY_RULE_SETUP
#line 87 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "tools/compile/llcLexer.l"
{ return LLC_WORD;		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 91 "tools/compile/llcLexer.l"
{ return LLC_STRING;	}
	YY_BREAK
/* Postfix modifiers... */
case 23:
YY_RULE_SETUP
#line 95 "tools/compile/llcLexer.l"
{ return LLC_LIST;		}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 96 "tools/compile/llcLexer.l"
{ return LLC_POINTER;	}
	YY_BREAK
/* Prefix modifiers... */
case 25:
YY_RULE_SETUP
#line 100 "tools/compile/llcLexer.l"
{ return LLC_CONST;		}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 101 "tools/compile/llcLexer.l"
{ return LLC_CONST;		}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 102 "tools/compile/llcLexer.l"
{ return LLC_REALLY;	}
	YY_BREAK
/***************************************************************************
	Function bits
  ***************************************************************************/
case 28:
YY_RULE_SETUP
#line 108 "tools/compile/llcLexer.l"
{ return LLC_OPEN_BRACE;		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 109 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_BRACE;		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 110 "tools/compile/llcLexer.l"
{ return LLC_OPEN_PAREN;		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 111 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_PAREN;		}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 112 "tools/compile/llcLexer.l"
{ return LLC_DOT;				}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 113 "tools/compile/llcLexer.l"
{ return LLC_COMMA;				}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 114 "tools/compile/llcLexer.l"
{ return LLC_SEMICOLON;			}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 115 "tools/compile/llcLexer.l"
{ return LLC_COLON;				}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 116 "tools/compile/llcLexer.l"
{ return LLC_DCOLON;			}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 117 "tools/compile/llcLexer.l"
{ return LLC_OPEN_REFERENCE;	}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 118 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_REFERENCE;	}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 120 "tools/compile/llcLexer.l"
{ return LLC_RETURN;			}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "tools/compile/llcLexer.l"
{ return LLC_SUSPEND;			}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 123 "tools/compile/llcLexer.l"
{ return LLC_ROUTINE;			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 124 "tools/compile/llcLexer.l"
{ return LLC_PROCESS;			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 126 "tools/compile/llcLexer.l"
{ return LLC_EXCLUDE;			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "tools/compile/llcLexer.l"
{ return LLC_OVERLOAD;			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "tools/compile/llcLexer.l"
{ return LLC_OVERLOAD;			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 131 "tools/compile/llcLexer.l"
{ return LLC_RESULT;			}
	YY_BREAK
/***************************************************************************
	Math - Shift
  ***************************************************************************/
case 47:
YY_RULE_SETUP
#line 137 "tools/compile/llcLexer.l"
{ return LLC_LEFT_SHIFT;			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 138 "tools/compile/llcLexer.l"
{ return LLC_RIGHT_SHIFT;			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 139 "tools/compile/llcLexer.l"
{ return LLC_LEFT_SHIFT_EQUALS;		}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 140 "tools/compile/llcLexer.l"
{ return LLC_RIGHT_SHIFT_EQUALS;	}
	YY_BREAK
/***************************************************************************
	Math - Arith
  ***************************************************************************/
case 51:
YY_RULE_SETUP
#line 146 "tools/compile/llcLexer.l"
{ return LLC_MUL;				}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 147 "tools/compile/llcLexer.l"
{ return LLC_DIV;				}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 148 "tools/compile/llcLexer.l"
{ return LLC_ADD;				}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 149 "tools/compile/llcLexer.l"
{ return LLC_SUB;				}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 150 "tools/compile/llcLexer.l"
{ return LLC_MOD;				}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 151 "tools/compile/llcLexer.l"
{ return LLC_MOD;				}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 152 "tools/compile/llcLexer.l"
{ return LLC_EXCLUSIVE_ADD;		}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 154 "tools/compile/llcLexer.l"
{ return LLC_MUL_EQ;			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 155 "tools/compile/llcLexer.l"
{ return LLC_DIV_EQ;			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 156 "tools/compile/llcLexer.l"
{ return LLC_ADD_EQ;			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 157 "tools/compile/llcLexer.l"
{ return LLC_SUB_EQ;			}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 158 "tools/compile/llcLexer.l"
{ return LLC_EXCLUSIVE_ADD_EQ;	}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 159 "tools/compile/llcLexer.l"
{ return LLC_INC;				}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 160 "tools/compile/llcLexer.l"
{ return LLC_DEC;				}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 162 "tools/compile/llcLexer.l"
{ return LLC_EQUALS;			}
	YY_BREAK
/***************************************************************************
	Math - Compare
  ***************************************************************************/
case 66:
YY_RULE_SETUP
#line 168 "tools/compile/llcLexer.l"
{ return LLC_AND;			}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 169 "tools/compile/llcLexer.l"
{ return LLC_AND;			}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 170 "tools/compile/llcLexer.l"
{ return LLC_OR;			}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 171 "tools/compile/llcLexer.l"
{ return LLC_OR;			}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 172 "tools/compile/llcLexer.l"
{ return LLC_NOT;			}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 173 "tools/compile/llcLexer.l"
{ return LLC_NOT;			}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 175 "tools/compile/llcLexer.l"
{ return LLC_LT;			}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 176 "tools/compile/llcLexer.l"
{ return LLC_LE;			}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 177 "tools/compile/llcLexer.l"
{ return LLC_GT;			}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 178 "tools/compile/llcLexer.l"
{ return LLC_GE;			}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 179 "tools/compile/llcLexer.l"
{ return LLC_NE;			}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 180 "tools/compile/llcLexer.l"
{ return LLC_NE;			}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "tools/compile/llcLexer.l"
{ return LLC_BIT_AND;		}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 183 "tools/compile/llcLexer.l"
{ return LLC_BIT_OR;		}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 184 "tools/compile/llcLexer.l"
{ return LLC_BIT_NOT;		}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 185 "tools/compile/llcLexer.l"
{ return LLC_BIT_AND_EQ;	}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 186 "tools/compile/llcLexer.l"
{ return LLC_BIT_OR_EQ;		}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 188 "tools/compile/llcLexer.l"
{ return LLC_TRUE;			}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 189 "tools/compile/llcLexer.l"
{ return LLC_FALSE;			}
	YY_BREAK
/***************************************************************************
	List
  ***************************************************************************/
case 85:
YY_RULE_SETUP
#line 195 "tools/compile/llcLexer.l"
{ return LLC_LIST_OPEN;		}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 196 "tools/compile/llcLexer.l"
{ return LLC_LIST_CLOSE;	}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 198 "tools/compile/llcLexer.l"
{ return LLC_OPEN_INDEX;	}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 199 "tools/compile/llcLexer.l"
{ return LLC_CLOSE_INDEX;	}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 201 "tools/compile/llcLexer.l"
{ return LLC_IN;			}
	YY_BREAK
/***************************************************************************
	Conditionals
  ***************************************************************************/
case 90:
YY_RULE_SETUP
#line 207 "tools/compile/llcLexer.l"
{ return LLC_HASHIF;	}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 208 "tools/compile/llcLexer.l"
{ return LLC_IF;		}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 209 "tools/compile/llcLexer.l"
{ return LLC_ELSE;		}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 210 "tools/compile/llcLexer.l"
{ return LLC_WHILE;		}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 211 "tools/compile/llcLexer.l"
{ return LLC_FOREACH;	}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 212 "tools/compile/llcLexer.l"
{ return LLC_RECURSIVE;	}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 213 "tools/compile/llcLexer.l"
{ return LLC_CASE;		}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 214 "tools/compile/llcLexer.l"
{ return LLC_DEFAULT;	}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 215 "tools/compile/llcLexer.l"
{ return LLC_BREAK;		}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 216 "tools/compile/llcLexer.l"
{ return LLC_CONTINUE;	}
	YY_BREAK
/***************************************************************************
	Overloadable Function
  ***************************************************************************/
/* Only a couple defined atm, will work out the rest later once things start
	get put together... */
case 100:
YY_RULE_SETUP
#line 225 "tools/compile/llcLexer.l"
{ return LLC_OF_LOOK;	}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 226 "tools/compile/llcLexer.l"
{ return LLC_OF_USE;	}
	YY_BREAK
/***************************************************************************
	Misc
  ***************************************************************************/
case 102:
YY_RULE_SETUP
#line 232 "tools/compile/llcLexer.l"
{ return LLC_CLASS;			}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 233 "tools/compile/llcLexer.l"
{ return LLC_INHERITS;		}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 234 "tools/compile/llcLexer.l"
{ return LLC_IS_A;			}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 235 "tools/compile/llcLexer.l"
{ return LLC_ARE;			}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 236 "tools/compile/llcLexer.l"
{ return LLC_ADDRESS_OF;	}
	YY_BREAK
/***************************************************************************
	Identifiers
  ***************************************************************************/
case 107:
YY_RULE_SETUP
#line 242 "tools/compile/llcLexer.l"
{ return LLC_FUNC_IDENT;	}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 244 "tools/compile/llcLexer.l"
{ return LLC_IDENT;			}
	YY_BREAK
/***************************************************************************
	Catch All
  ***************************************************************************/
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CCOMMENT):
#line 250 "tools/compile/llcLexer.l"
{ return LLC_EOF;	}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 252 "tools/compile/llcLexer.l"
{ return LLC_ERROR;	}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 254 "tools/compile/llcLexer.l"
ECHO;
	YY_BREAK
#line 1678 "tools/compile/llcLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = static_cast<int>(yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = static_cast<int>(yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				static_cast<int>(yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = static_cast<int>(yy_def[yy_current_state]);
			if ( yy_current_state >= 306 )
				yy_c = yy_meta[static_cast<unsigned int>(yy_c)];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + static_cast<unsigned int>(yy_c)];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = static_cast<int>(yy_def[yy_current_state]);
		if ( yy_current_state >= 306 )
			yy_c = yy_meta[static_cast<unsigned int>(yy_c)];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + static_cast<unsigned int>(yy_c)];
	yy_is_jam = (yy_current_state == 305);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += static_cast<int>(dest - source);
		yy_bp += static_cast<int>(dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}

void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 254 "tools/compile/llcLexer.l"


